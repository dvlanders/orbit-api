{
  "openapi": "3.0.0",
  "info": {
    "title": "Hifi API",
    "version": "1.0.0",
    "description": "API documentation for Hifi"
  },
  "servers": [
    {
      "url": "https://production.hifibridge.com",
      "description": "Production server"
    },
    {
      "url": "https://sandbox.hifibridge.com",
      "description": "Sandbox server"
    }
  ],
  "tags": [
    {
      "name": "Common",
      "description": "Common endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Account",
      "description": "Account endpoints"
    },
    {
      "name": "Transfer",
      "description": "Transfer endpoints"
    },
    {
      "name": "Quotes",
      "description": "Quotes endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "AccountIdParameter": {
        "name": "accountId",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "ID of the account",
        "required": true
      },
      "CurrencyParameter": {
        "name": "currency",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "usd",
            "eur",
            "brl",
            "mxn",
            "ars",
            "cop"
          ]
        },
        "description": "Please provide at least one of the following query params: currency, railType. Eg. Setting 'currency' to 'usd' without setting 'railType' and 'paymentRail' will return all usd accounts under any railType or paymentRail.",
        "required": false
      },
      "RailTypeParameter": {
        "name": "railType",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "onramp",
            "offramp"
          ]
        },
        "description": "Please provide at least one of the following query params: currency, railType. Eg. Setting 'railType' to 'offramp' without setting 'currency' and 'paymentRail' will return all offramp accounts under any currency or paymentRail.",
        "required": false
      },
      "PaymentRailParameter": {
        "name": "paymentRail",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "ach",
            "wire",
            "sepa",
            "pix",
            "spei",
            "transfers",
            "ach_cop"
          ]
        },
        "required": false
      },
      "RailParameter": {
        "name": "rail",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "US_ACH_WIRE"
          ]
        },
        "required": true
      },
      "DestinationCurrencyParameter": {
        "name": "destinationCurrency",
        "description": "usdt is allowed only on ETHEREUM_MAINNET at this moment",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "usdc"
          ]
        },
        "required": true
      },
      "DestinationChainParameter": {
        "name": "destinationChain",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
          "enum": [
            "POLYGON_MAINNET",
            "POLYGON_AMOY"
          ]
        },
        "required": true
      },
      "VALimitParameter": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "string",
          "minimum": 1,
          "maximum": 100
        },
        "description": "Number of micro deposit records return for the virtual account, default to 10 maximum to 100",
        "required": false
      },
      "VACreatedBeforeParameter": {
        "name": "createdBefore",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Return the micro deposit records that created before this eventId",
        "required": false
      },
      "VACreatedAfterParameter": {
        "name": "createdAfter",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Return the micro deposit records that created after this eventId",
        "required": false
      },
      "AccountTypeParameter": {
        "name": "accountType",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "us",
            "iban"
          ]
        },
        "required": true
      },
      "ReceiverIdParameter": {
        "name": "receiverId",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "ID of the receiver",
        "required": true
      },
      "ReceiverIdOptionalParameter": {
        "name": "receiverId",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "ID of the receiver",
        "required": false
      },
      "LimitParameter": {
        "name": "limit",
        "in": "query",
        "schema": {
          "type": "string",
          "minimum": 1,
          "maximum": 100
        },
        "description": "default to 10, maximum to 100",
        "required": false
      },
      "CreatedBeforeParameter": {
        "name": "createdBefore",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "format: YYYY-MM-DD",
        "required": false
      },
      "CreatedAfterParameter": {
        "name": "createdAfter",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "format: YYYY-MM-DD",
        "required": false
      },
      "TransferRecordIDParameter": {
        "name": "id",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Transfer record ID.",
        "required": true
      },
      "BridgeAssetRecordIDParameter": {
        "name": "id",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Bridge asset record ID.",
        "required": true
      },
      "FromCurrencyParameter": {
        "name": "fromCurrency",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "usdc"
          ]
        },
        "required": true
      },
      "ToCurrencyParameter": {
        "name": "toCurrency",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "usd",
            "eur",
            "brl",
            "mxn",
            "ars",
            "cop"
          ]
        },
        "required": true
      },
      "TransferRecordIDOptionalParameter": {
        "name": "id",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Transfer record ID.",
        "required": false
      },
      "TransferTypeParameter": {
        "name": "transferType",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "crypto-to-crypto",
            "fiat-to-crypto",
            "crypto-to-fiat",
            "fiat-to-fiat"
          ]
        },
        "description": "Transfer type",
        "required": true
      },
      "TransferTypeOptionalParameter": {
        "name": "transferType",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "crypto-to-crypto",
            "fiat-to-crypto",
            "crypto-to-fiat",
            "fiat-to-fiat"
          ]
        },
        "description": "Transfer type",
        "required": false
      },
      "UserIdParameter": {
        "name": "userId",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "The user ID.",
        "required": true
      },
      "UserIdOptionalParameter": {
        "name": "userId",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "The user ID.",
        "required": false
      },
      "UserTypeParameter": {
        "name": "userType",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "individual",
            "business"
          ]
        },
        "description": "If userType is passed, you will get all users under the type.",
        "required": false
      },
      "ChainParameter": {
        "name": "chain",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "POLYGON_MAINNET",
            "POLYGON_AMOY"
          ]
        },
        "description": "The blockchain network to retrieve the balance from. Currently, only POLYGON_MAINNET is supported in production and only POLYGON_AMOY is supported in sandbox.",
        "required": true
      },
      "CryptoCurrencyParameter": {
        "name": "currency",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "usdc",
            "usdHifi"
          ]
        },
        "description": "The type of currency to check the balance for. Currently, only usdc is supported.",
        "required": true
      }
    },
    "requestBodies": {
      "UsdOnrampAchAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOnrampAchAccount"
            }
          }
        }
      },
      "UsdOnrampWireAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOnrampWireAccount"
            }
          }
        }
      },
      "UsdOfframpAchAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOfframpAchAccount"
            }
          }
        }
      },
      "UsdOfframpWireAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UsdOfframpWireUSAccount"
                },
                {
                  "$ref": "#/components/schemas/UsdOfframpWireNonUSAccount"
                }
              ]
            }
          }
        }
      },
      "EurOfframpSepaAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EurOfframpSepaAccount"
            }
          }
        }
      },
      "KesOfframpMomoAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KesOfframpMOMOAccount"
            }
          }
        }
      },
      "XofOfframpMomoAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/XofOfframpMOMOAccount"
            }
          }
        }
      },
      "RwfOfframpMomoAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RwfOfframpMOMOAccount"
            }
          }
        }
      },
      "ZmwOfframpMomoAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ZmwOfframpMOMOAccount"
            }
          }
        }
      },
      "NgnOfframpBankAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NgnOfframpBankAccount"
            }
          }
        }
      },
      "UgxOfframpBankAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UgxOfframpBankAccount"
            }
          }
        }
      },
      "TzsOfframpBankAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TzsOfframpBankAccount"
            }
          }
        }
      },
      "MwkOfframpBankAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MwkOfframpBankAccount"
            }
          }
        }
      },
      "XafOfframpBankAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/XafOfframpBankAccount"
            }
          }
        }
      },
      "SAOfframpReceiverCreateBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SAReceiverCreateIndividualLightKYCAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverCreateIndividualStandardKYCAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverCreateBusinessLightKYBAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverCreateBusinessStandardKYBAccount"
                }
              ]
            }
          }
        }
      },
      "SAOfframpReceiverUpdateBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SAReceiverUpdateIndividualLightKYCAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverUpdateIndividualStandardKYCAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverUpdateBusinessLightKYBAccount"
                },
                {
                  "$ref": "#/components/schemas/SAReceiverUpdateBusinessStandardKYBAccount"
                }
              ]
            }
          }
        }
      },
      "SAOfframpAccountBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BrlOfframpPixAccount"
                },
                {
                  "$ref": "#/components/schemas/CopOfframpAchCopAccount"
                },
                {
                  "$ref": "#/components/schemas/MxnOfframpSpeiAccount"
                },
                {
                  "$ref": "#/components/schemas/ArsOfframpTransfersAccount"
                }
              ]
            }
          }
        }
      },
      "CryptoToCryptoTransferBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToCryptoTransfer"
            }
          }
        }
      },
      "CryptoToFiatTransferBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ACHCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/SEPACryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/WIRECryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/PIXCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/SWIFTCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/SPEICryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/TRANSFERSCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/ACH_COPCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/MOMO_KESCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/MOMO_XOFCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/MOMO_RWFCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/MOMO_ZMWCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/BANK_NGNCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/BANK_UGXCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/BANK_TZSCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/BANK_MWKCryptoToFiatTransfer"
                },
                {
                  "$ref": "#/components/schemas/BANK_XAFCryptoToFiatTransfer"
                }
              ]
            }
          }
        }
      },
      "FiatToCryptoTransferBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToCryptoTransfer"
            }
          }
        }
      },
      "FiatToFiatTransferBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToFiatTransfer"
            }
          }
        }
      },
      "BridgeAssetTransferBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BridgeAssetTransfer"
            }
          }
        }
      },
      "UserCreateBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IndividualUserKycOneCreate"
                },
                {
                  "$ref": "#/components/schemas/IndividualUserKycTwoCreate"
                },
                {
                  "$ref": "#/components/schemas/BusinessUserKycOneCreate"
                },
                {
                  "$ref": "#/components/schemas/BusinessUserKycTwoCreate"
                }
              ]
            }
          }
        }
      },
      "UserUpdateBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IndividualUserUpdate"
                },
                {
                  "$ref": "#/components/schemas/BusinessUserUpdate"
                }
              ]
            }
          }
        }
      },
      "ToSLinkBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ToSLink"
            }
          }
        }
      }
    },
    "responses": {
      "UsdOnrampAchAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOnrampAchAccountObject"
            }
          }
        }
      },
      "UsdOnrampWireAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOnrampWireAccountObject"
            }
          }
        }
      },
      "UsdOfframpAchAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOfframpAchAccountObject"
            }
          }
        }
      },
      "UsdOfframpWireAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UsdOfframpWireAccountObject"
            }
          }
        }
      },
      "EurOfframpSepaAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EurOfframpSepaAccountObject"
            }
          }
        }
      },
      "KesOfframpMomoAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KesOfframpMomoAccountObject"
            }
          }
        }
      },
      "XofOfframpMomoAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/XofOfframpMomoAccountObject"
            }
          }
        }
      },
      "RwfOfframpMomoAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RwfOfframpMomoAccountObject"
            }
          }
        }
      },
      "ZmwOfframpMomoAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ZmwOfframpMomoAccountObject"
            }
          }
        }
      },
      "NgnOfframpBankAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NgnOfframpBankAccountObject"
            }
          }
        }
      },
      "UgxOfframpBankAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UgxOfframpBankAccountObject"
            }
          }
        }
      },
      "TzsOfframpBankAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TzsOfframpBankAccountObject"
            }
          }
        }
      },
      "MwkOfframpBankAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MwkOfframpBankAccountObject"
            }
          }
        }
      },
      "XafOfframpBankAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/XafOfframpBankAccountObject"
            }
          }
        }
      },
      "SAOfframpReceiverCreateResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SAOfframpReceiverCreateObject"
            }
          }
        }
      },
      "SAOfframpReceiverUpdateResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SAOfframpReceiverUpdateObject"
            }
          }
        }
      },
      "SAOfframpReceiverGetResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SAOfframpReceiverGetObject"
            }
          }
        }
      },
      "BrlOfframpPixAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BrlOfframpPixAccountObject"
            }
          }
        }
      },
      "CopOfframpAchCopAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CopOfframpAchCopAccountObject"
            }
          }
        }
      },
      "MxnOfframpSpeiAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MxnOfframpSpeiAccountObject"
            }
          }
        }
      },
      "ArsOfframpTransfersAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ArsOfframpTransfersAccountObject"
            }
          }
        }
      },
      "GetAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AccountObject"
            }
          }
        }
      },
      "GetAllAccountsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AllAccountObjects"
            }
          }
        }
      },
      "GetVirtualAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VirtualAccountObject"
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Unauthorized"
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFound"
            }
          }
        }
      },
      "InternalServerErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerError"
            }
          }
        }
      },
      "PingResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pong"
            }
          }
        }
      },
      "CryptoToCryptoTransferResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToCryptoTransferObject"
            }
          }
        }
      },
      "CryptoToFiatTransferResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToFiatTransferObject"
            }
          }
        }
      },
      "FiatToCryptoTransferResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToCryptoTransferObject"
            }
          }
        }
      },
      "CryptoToCryptoRecordResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToCryptoRecordObject"
            }
          }
        }
      },
      "CryptoToFiatRecordResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToFiatRecordObject"
            }
          }
        }
      },
      "FiatToCryptoRecordResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToCryptoRecordObject"
            }
          }
        }
      },
      "FiatToFiatRecordResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToFiatRecordObject"
            }
          }
        }
      },
      "CryptoToCryptoAllRecordsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToCryptoAllRecordsObject"
            }
          }
        }
      },
      "CryptoToFiatAllRecordsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToFiatAllRecordsObject"
            }
          }
        }
      },
      "FiatToCryptoAllRecordsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FiatToCryptoAllRecordsObject"
            }
          }
        }
      },
      "CryptoToFiatConversionRateResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CryptoToFiatConversionRateObject"
            }
          }
        }
      },
      "AcceptFiatToCryptoQuoteResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AcceptFiatToCryptoQuoteObject"
            }
          }
        }
      },
      "BridgeAssetTransferResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BridgeAssetTransferObject"
            }
          }
        }
      },
      "BridgeAssetRecordResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BridgeAssetTransferObject"
            }
          }
        }
      },
      "UserObjectPendingResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserObjectPending"
                },
                {
                  "$ref": "#/components/schemas/UserObjectPending_dep"
                }
              ]
            }
          }
        }
      },
      "UserObjectActiveResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserObjectActive"
                },
                {
                  "$ref": "#/components/schemas/UserObjectActive_dep"
                }
              ]
            }
          }
        }
      },
      "AllUserObjectsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AllUserObjects"
            }
          }
        }
      },
      "ToSLinkObjectResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ToSLinkObject"
            }
          }
        }
      },
      "WalletBalanceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WalletBalanceObject"
            }
          }
        }
      }
    },
    "schemas": {
      "UsdOnrampAchAccount": {
        "type": "object",
        "properties": {
          "plaidProcessorToken": {
            "type": "string",
            "description": "See https://plaid.com/docs/api/processors/"
          },
          "bankName": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "CHECKING",
              "SAVING",
              "BUSINESS"
            ]
          },
          "createVirtualAccount": {
            "type": "boolean"
          }
        },
        "required": [
          "plaidProcessorToken",
          "bankName",
          "accountType",
          "createVirtualAccount"
        ]
      },
      "UsdOnrampWireAccount": {
        "type": "object",
        "properties": {
          "rail": {
            "type": "string",
            "description": "Passing \"US_ACH_WIRE\" allows the user to do USD onramp through both ACH and Wire.",
            "enum": [
              "US_ACH_WIRE"
            ]
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "usdt",
              "usdc"
            ]
          },
          "destinationChain": {
            "type": "string",
            "enum": [
              "POLYGON_MAINNET",
              "ETHEREUM_MAINNET"
            ]
          }
        },
        "required": [
          "rail"
        ]
      },
      "UsdOfframpAchAccount": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "bankName": {
            "type": "string",
            "description": "e.g. Chase, Bank of America"
          },
          "accountOwnerName": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "accountOwnerType": {
            "type": "string",
            "enum": [
              "individual",
              "business"
            ]
          },
          "streetLine1": {
            "type": "string",
            "description": "This has to be a valid street address."
          },
          "streetLine2": {
            "type": "string",
            "description": "This has to be a valid street address. Eg. It cannot be a PO Box."
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. e.g. CA"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec. Currently must be passed as \"USA\"."
          }
        },
        "required": [
          "currency",
          "bankName",
          "accountOwnerName",
          "accountOwnerType",
          "accountNumber",
          "routingNumber",
          "streetLine1",
          "city",
          "state",
          "postalCode",
          "country"
        ]
      },
      "UsdOfframpWireUSAccount": {
        "type": "object",
        "title": "USD Offramp Wire to US Bank Account",
        "properties": {
          "accountType": {
            "type": "string",
            "enum": [
              "us",
              "iban"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency denomination of the destination bank account. Must be usd.",
            "enum": [
              "usd"
            ]
          },
          "bankName": {
            "type": "string",
            "example": "Bank of America"
          },
          "accountOwnerName": {
            "type": "string",
            "example": "John Doe"
          },
          "accountOwnerType": {
            "type": "string",
            "description": "Specify 'business' if the account is owned by a business, otherwise 'individual'. If 'business', 'businessName' is required. If 'individual', 'firstName' and 'lastName' are required.",
            "enum": [
              "business",
              "individual"
            ]
          },
          "businessName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'business'.",
            "example": "Doe Enterprises"
          },
          "firstName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'individual'.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'individual'.",
            "example": "Doe"
          },
          "accountNumber": {
            "type": "string",
            "example": "1234567890"
          },
          "routingNumber": {
            "type": "string",
            "example": "011000138"
          },
          "streetLine1": {
            "type": "string",
            "example": "123 Main St"
          },
          "streetLine2": {
            "type": "string",
            "example": "Suite 100"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "example": "USA"
          }
        },
        "required": [
          "accountType",
          "currency",
          "bankName",
          "accountOwnerName",
          "accountOwnerType",
          "accountNumber",
          "routingNumber",
          "streetLine1",
          "city",
          "state",
          "postalCode",
          "country"
        ]
      },
      "UsdOfframpWireNonUSAccount": {
        "type": "object",
        "title": "USD Offramp Wire to IBAN Bank Account",
        "properties": {
          "accountType": {
            "type": "string",
            "enum": [
              "us",
              "iban"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "bankName": {
            "type": "string",
            "example": "Deutsche Bank"
          },
          "accountOwnerName": {
            "type": "string",
            "example": "John Doe"
          },
          "ibanAccountNumber": {
            "type": "string",
            "description": "The IBAN for the bank account.",
            "example": "DE89 3704 0044 0532 0130 00"
          },
          "accountOwnerType": {
            "type": "string",
            "description": "Specify 'business' or 'individual'. Relevant name fields must be provided based on this type.",
            "enum": [
              "business",
              "individual"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'individual'.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'individual'.",
            "example": "Doe"
          },
          "businessName": {
            "type": "string",
            "description": "Required if 'accountOwnerType' is 'business'.",
            "example": "Doe Enterprises"
          },
          "businessIdentifierCode": {
            "type": "string",
            "description": "Also known as SWIFT code.",
            "example": "DEUTDEDBFRA"
          },
          "ibanCountryCode": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "example": "DEU"
          },
          "streetLine1": {
            "type": "string",
            "example": "123 Berlin St"
          },
          "streetLine2": {
            "type": "string",
            "example": "Building A"
          },
          "city": {
            "type": "string",
            "example": "Berlin"
          },
          "state": {
            "type": "string",
            "example": "Berlin"
          },
          "postalCode": {
            "type": "string",
            "example": "10115"
          },
          "country": {
            "type": "string",
            "example": "Germany"
          }
        },
        "required": [
          "accountType",
          "currency",
          "bankName",
          "accountOwnerName",
          "accountOwnerType",
          "ibanAccountNumber",
          "businessIdentifierCode",
          "ibanCountryCode",
          "streetLine1",
          "city",
          "postalCode",
          "country"
        ]
      },
      "UsdOfframpWireNonUSIbanSupportedAccount": {
        "type": "object",
        "title": "USD Offramp Wire Iban Supported",
        "properties": {
          "iban": {
            "type": "string",
            "description": "Either a swift account number or iban must be provided."
          },
          "accountHolderName": {
            "type": "string"
          },
          "accountHolderCity": {
            "type": "string"
          },
          "accountHolderCountry": {
            "type": "string"
          },
          "accountHolderStreetLine1": {
            "type": "string"
          },
          "accountHolderStreetLine2": {
            "type": "string"
          },
          "accountHolderStateProvinceRegion": {
            "type": "string"
          },
          "accountHolderPostalCode": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "bankCity": {
            "type": "string"
          },
          "bankCountry": {
            "type": "string"
          },
          "bankStreetLine1": {
            "type": "string"
          },
          "bankStreetLine2": {
            "type": "string"
          },
          "bankStateProvinceRegion": {
            "type": "string"
          }
        },
        "required": [
          "iban",
          "accountHolderName",
          "accountHolderCity",
          "accountHolderCountry",
          "accountHolderStreetLine1",
          "accountHolderPostalCode",
          "bankCity",
          "bankCountry"
        ]
      },
      "UsdOfframpWireNonUSIbanUnsupportedAccount": {
        "type": "object",
        "title": "USD Offramp Wire Non-US Iban Unsupported",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Either a swift account number or iban must be provided."
          },
          "businessIdentifierCode": {
            "type": "string"
          },
          "accountHolderName": {
            "type": "string"
          },
          "accountHolderCity": {
            "type": "string"
          },
          "accountHolderCountry": {
            "type": "string"
          },
          "accountHolderStreetLine1": {
            "type": "string"
          },
          "accountHolderStreetLine2": {
            "type": "string"
          },
          "accountHolderStateProvinceRegion": {
            "type": "string"
          },
          "accountHolderPostalCode": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "bankCity": {
            "type": "string"
          },
          "bankCountry": {
            "type": "string"
          },
          "bankStreetLine1": {
            "type": "string"
          },
          "bankStreetLine2": {
            "type": "string"
          },
          "bankStateProvinceRegion": {
            "type": "string"
          }
        },
        "required": [
          "accountNumber",
          "businessIdentifierCode",
          "accountHolderName",
          "accountHolderCity",
          "accountHolderCountry",
          "accountHolderStreetLine1",
          "accountHolderPostalCode",
          "bankName",
          "bankCity",
          "bankCountry"
        ]
      },
      "EurOfframpSepaAccount": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "eur"
            ]
          },
          "bankName": {
            "type": "string",
            "description": "e.g. Deutsche Bank"
          },
          "accountOwnerName": {
            "type": "string"
          },
          "accountOwnerType": {
            "type": "string",
            "enum": [
              "individual",
              "business"
            ]
          },
          "ibanAccountNumber": {
            "type": "string",
            "description": "The International Bank Account Number (IBAN) that will be used to send the funds."
          },
          "ibanCountryCode": {
            "type": "string",
            "description": "Country in which the bank account is located. It's a three-letter alpha-3 country code as defined in the ISO 3166-1 spec."
          },
          "businessIdentifierCode": {
            "type": "string",
            "description": "The Business Identifier Code (BIC) that will be used to send the funds."
          },
          "firstName": {
            "type": "string",
            "description": "Required when accountOwnerType == \"individual\""
          },
          "lastName": {
            "type": "string",
            "description": "Required when accountOwnerType == \"individual\""
          },
          "businessName": {
            "type": "string",
            "description": "Required when accountOwnerType == \"business\""
          }
        },
        "required": [
          "currency",
          "bankName",
          "accountOwnerName",
          "accountOwnerType",
          "ibanAccountNumber",
          "businessIdentifierCode",
          "ibanCountryCode"
        ]
      },
      "KesOfframpMOMOAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "kind": {
            "type": "string",
            "enum": [
              "MOMO_MPESA"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountHolderName",
          "kind"
        ]
      },
      "XofOfframpMOMOAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "kind": {
            "type": "string",
            "enum": [
              "MOMO_MTN"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountHolderName",
          "kind"
        ]
      },
      "RwfOfframpMOMOAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "kind": {
            "type": "string",
            "enum": [
              "MOMO_MTN"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountHolderName",
          "kind"
        ]
      },
      "ZmwOfframpMOMOAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "kind": {
            "type": "string",
            "enum": [
              "MOMO_MTN"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountHolderName",
          "kind"
        ]
      },
      "NgnOfframpBankAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountNumber": {
            "type": "string",
            "description": "Mobile Money account number of the Recipient. Required field for 'BANK_Access Bank' kind."
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "kind": {
            "type": "string",
            "enum": [
              "BANK_Access Bank",
              "BANK_GT Bank",
              "BANK_United Bank for Africa"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountHolderName",
          "kind"
        ]
      },
      "UgxOfframpBankAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountNumber": {
            "type": "string",
            "description": "Mobile Money account number of the Recipient. Required field for 'BANK_Access Bank' kind."
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "bankName": {
            "type": "string",
            "description": "Recipient bank name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "BANK_Manul Entry"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountNumber",
          "accountHolderName",
          "bankName",
          "kind"
        ]
      },
      "TzsOfframpBankAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountNumber": {
            "type": "string",
            "description": "Mobile Money account number of the Recipient. Required field for 'BANK_Access Bank' kind."
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "bankName": {
            "type": "string",
            "description": "Recipient bank name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "BANK_Manul Entry"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountNumber",
          "accountHolderName",
          "bankName",
          "kind"
        ]
      },
      "MwkOfframpBankAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountNumber": {
            "type": "string",
            "description": "Mobile Money account number of the Recipient. Required field for 'BANK_Access Bank' kind."
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "bankName": {
            "type": "string",
            "description": "Recipient bank name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "BANK_Manul Entry"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountNumber",
          "accountHolderName",
          "bankName",
          "kind"
        ]
      },
      "XafOfframpBankAccount": {
        "type": "object",
        "properties": {
          "accountHolderPhone": {
            "type": "string",
            "description": "Mobile Money account phone number of the Recipient. e.g. +2547111111"
          },
          "accountNumber": {
            "type": "string",
            "description": "Mobile Money account number of the Recipient. Required field for 'BANK_Access Bank' kind."
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder as it appears on the Mobile Money account."
          },
          "bankName": {
            "type": "string",
            "description": "Recipient bank name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "BANK_Manul Entry"
            ],
            "description": "Kind of Mobile Money transfer."
          }
        },
        "required": [
          "accountHolderPhone",
          "accountNumber",
          "accountHolderName",
          "bankName",
          "kind"
        ]
      },
      "SAReceiverCreateIndividualLightKYCAccount": {
        "type": "object",
        "title": "Receiver Individual Light KYC Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "individual"
            ]
          },
          "kyc_type": {
            "type": "string",
            "enum": [
              "light"
            ]
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          }
        },
        "required": [
          "type",
          "kyc_type",
          "first_name",
          "last_name",
          "date_of_birth",
          "email",
          "country"
        ]
      },
      "SAReceiverCreateIndividualStandardKYCAccount": {
        "type": "object",
        "title": "Receiver Individual Standard KYC Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "individual"
            ]
          },
          "kyc_type": {
            "type": "string",
            "enum": [
              "standard"
            ]
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\". `country` should match `id_doc_country`."
          },
          "tax_id": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state_province_region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "id_doc_country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\". `id_doc_country` should match `country`."
          },
          "id_doc_type": {
            "type": "string",
            "enum": [
              "PASSPORT",
              "ID_CARD",
              "DRIVERS"
            ]
          },
          "id_doc_front_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "id_doc_back_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "proof_of_address_doc_type": {
            "type": "string",
            "enum": [
              "UTILITY_BILL",
              "BANK_STATEMENT",
              "RENTAL_AGREEMENT",
              "TAX_DOCUMENT",
              "GOVERNMENT_CORRESPONDENCE"
            ]
          },
          "proof_of_address_doc_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          }
        },
        "required": [
          "type",
          "kyc_type",
          "first_name",
          "last_name",
          "date_of_birth",
          "email",
          "country",
          "tax_id",
          "ip_address",
          "address_line_1",
          "city",
          "state_province_region",
          "postal_code",
          "id_doc_country",
          "id_doc_type",
          "id_doc_front_file"
        ]
      },
      "SAReceiverCreateBusinessLightKYBAccount": {
        "type": "object",
        "title": "Receiver Business Light KYB Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "business"
            ]
          },
          "kyc_type": {
            "type": "string",
            "enum": [
              "light"
            ]
          },
          "legal_name": {
            "type": "string"
          },
          "tax_id": {
            "type": "string"
          },
          "formation_date": {
            "type": "string",
            "description": "date in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          }
        },
        "required": [
          "type",
          "kyc_type",
          "legal_name",
          "tax_id",
          "formation_date",
          "email",
          "country"
        ]
      },
      "SAReceiverCreateBusinessStandardKYBAccount": {
        "type": "object",
        "title": "Receiver Business Standard KYB Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "business"
            ]
          },
          "kyc_type": {
            "type": "string",
            "enum": [
              "standard"
            ]
          },
          "legal_name": {
            "type": "string"
          },
          "tax_id": {
            "type": "string"
          },
          "formation_date": {
            "type": "string",
            "description": "date in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "website": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state_province_region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "incorporation_doc_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "proof_of_ownership_doc_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiverBusinessOwner"
            }
          }
        },
        "required": [
          "type",
          "kyc_type",
          "legal_name",
          "tax_id",
          "formation_date",
          "email",
          "country",
          "ip_address",
          "address_line_1",
          "city",
          "state_province_region",
          "postal_code",
          "incorporation_doc_file",
          "proof_of_ownership_doc_file",
          "owners"
        ]
      },
      "SAReceiverUpdateIndividualLightKYCAccount": {
        "type": "object",
        "title": "Receiver Individual Light KYC Account",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          }
        }
      },
      "SAReceiverUpdateIndividualStandardKYCAccount": {
        "type": "object",
        "title": "Receiver Individual Standard KYC Account",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "tax_id": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state_province_region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "id_doc_country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "id_doc_type": {
            "type": "string",
            "enum": [
              "passport",
              "id_card"
            ]
          },
          "id_doc_front_file": {
            "type": "string"
          },
          "id_doc_back_file": {
            "type": "string"
          },
          "proof_of_address_doc_type": {
            "type": "string"
          },
          "proof_of_address_doc_file": {
            "type": "string"
          }
        }
      },
      "SAReceiverUpdateBusinessLightKYBAccount": {
        "type": "object",
        "title": "Receiver Business Light KYB Account",
        "properties": {
          "legal_name": {
            "type": "string"
          },
          "tax_id": {
            "type": "string"
          },
          "formation_date": {
            "type": "string",
            "description": "date in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          }
        }
      },
      "SAReceiverUpdateBusinessStandardKYBAccount": {
        "type": "object",
        "title": "Receiver Business Standard KYB Account",
        "properties": {
          "legal_name": {
            "type": "string"
          },
          "tax_id": {
            "type": "string"
          },
          "formation_date": {
            "type": "string",
            "description": "date in format yyyy-mm-dd",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "website": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "address_line_2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state_province_region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "incorporation_doc_file": {
            "type": "string"
          },
          "proof_of_ownership_doc_file": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiverBusinessOwner"
            }
          }
        }
      },
      "ReceiverBusinessOwner": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string"
          },
          "tax_id": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state_province_region": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "id_doc_country": {
            "type": "string",
            "description": "Two-letter alpha-2 country codes as defined in the ISO 3166-1 spec. eg. \"US\"."
          },
          "id_doc_type": {
            "type": "string",
            "enum": [
              "PASSPORT",
              "ID_CARD",
              "DRIVERS"
            ]
          },
          "id_doc_front_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "id_doc_back_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          },
          "proof_of_address_doc_type": {
            "type": "string",
            "enum": [
              "UTILITY_BILL",
              "BANK_STATEMENT",
              "RENTAL_AGREEMENT",
              "TAX_DOCUMENT",
              "GOVERNMENT_CORRESPONDENCE"
            ]
          },
          "proof_of_address_doc_file": {
            "type": "string",
            "description": "File size should not exceed 3MB"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "role",
          "date_of_birth",
          "tax_id",
          "address_line_1",
          "city",
          "country",
          "state_province_region",
          "postal_code",
          "id_doc_country",
          "id_doc_type",
          "id_doc_front_file",
          "id_doc_back_file",
          "proof_of_address_doc_type",
          "proof_of_address_doc_file"
        ]
      },
      "BrlOfframpPixAccount": {
        "type": "object",
        "title": "BRL Offramp PIX Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pix"
            ]
          },
          "name": {
            "type": "string"
          },
          "pix_key": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "brl"
            ]
          }
        },
        "required": [
          "type",
          "name",
          "pix_key",
          "currency"
        ]
      },
      "CopOfframpAchCopAccount": {
        "type": "object",
        "title": "COP Offramp ACH_COP Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ach_cop"
            ]
          },
          "name": {
            "type": "string"
          },
          "account_type": {
            "type": "string",
            "enum": [
              "checking",
              "savings"
            ]
          },
          "ach_cop_beneficiary_first_name": {
            "type": "string"
          },
          "ach_cop_beneficiary_last_name": {
            "type": "string"
          },
          "ach_cop_document_id": {
            "type": "string"
          },
          "ach_cop_document_type": {
            "type": "string",
            "enum": [
              "CC",
              "CE",
              "NIT",
              "PASS",
              "PEP"
            ]
          },
          "ach_cop_email": {
            "type": "string"
          },
          "ach_cop_bank_code": {
            "type": "string"
          },
          "ach_cop_bank_account": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "cop"
            ]
          }
        },
        "required": [
          "type",
          "name",
          "account_type",
          "ach_cop_beneficiary_first_name",
          "ach_cop_beneficiary_last_name",
          "ach_cop_document_id",
          "ach_cop_document_type",
          "ach_cop_email",
          "ach_cop_bank_code",
          "ach_cop_bank_account",
          "currency"
        ]
      },
      "ArsOfframpTransfersAccount": {
        "type": "object",
        "title": "ARS Offramp TRANSFERS Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "transfers"
            ]
          },
          "name": {
            "type": "string"
          },
          "transfers_type": {
            "type": "string",
            "enum": [
              "CVU",
              "CBU",
              "ALIAS"
            ]
          },
          "transfers_account": {
            "type": "string"
          },
          "beneficiary_name": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "ars"
            ]
          }
        },
        "required": [
          "type",
          "name",
          "transfers_type",
          "transfers_account",
          "beneficiary_name",
          "currency"
        ]
      },
      "MxnOfframpSpeiAccount": {
        "type": "object",
        "title": "MXN Offramp SPEI Account",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "spei"
            ]
          },
          "name": {
            "type": "string"
          },
          "spei_protocol": {
            "type": "string",
            "enum": [
              "clabe",
              "debitcard",
              "phonenum"
            ]
          },
          "spei_institution_code": {
            "type": "string"
          },
          "spei_clabe": {
            "type": "string"
          },
          "beneficiary_name": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "mxn"
            ]
          }
        },
        "required": [
          "type",
          "name",
          "spei_protocol",
          "spei_institution_code",
          "beneficiary_name",
          "currency"
        ]
      },
      "UsdOnrampAchAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Bank account added successfully",
          "id": "8ff3c91f-54e9-45ea-939b-23523ecc4ae4"
        }
      },
      "UsdOnrampWireAccountObject": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "account": {
            "type": "object",
            "properties": {
              "virtualAccountId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "paymentRails": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sourceCurrency": {
                "type": "string"
              },
              "destinationChain": {
                "type": "string"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "destinationWalletAddress": {
                "type": "string"
              },
              "railStatus": {
                "type": "string"
              },
              "depositInstructions": {
                "type": "object",
                "properties": {
                  "bankName": {
                    "type": "string"
                  },
                  "routingNumber": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "bankAddress": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "example": {
          "message": "US_ACH_WIRE create successfully",
          "account": {
            "virtualAccountId": "21593434-eb2a-4e44-a4d7-fc5700acd8a2",
            "userId": "75d7c01f-5f93-43434-8b93-a62fd8020358",
            "paymentRails": [
              "ach_push",
              "wire"
            ],
            "sourceCurrency": "usd",
            "destinationChain": "POLYGON_MAINNET",
            "destinationCurrency": "usdc",
            "destinationWalletAddress": "0xe039F7FC700194B82EB43E093e9607aE6fcb71c9",
            "railStatus": "activated",
            "depositInstructions": {
              "bankName": "Lead Bank",
              "routingNumber": "101023444",
              "accountNumber": "223401218467",
              "bankAddress": "1801 Main St., Kansas City, MO 64108"
            }
          }
        }
      },
      "UsdOfframpAchAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "583eb259-e78b-4f0c-a4b5-a8957876fa6f"
        }
      },
      "UsdOfframpWireAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "EurOfframpSepaAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "KesOfframpMomoAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "XofOfframpMomoAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "RwfOfframpMomoAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "ZmwOfframpMomoAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "NgnOfframpBankAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "UgxOfframpBankAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "TzsOfframpBankAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "MwkOfframpBankAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "XafOfframpBankAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553a"
        }
      },
      "SAOfframpReceiverCreateObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "kyc_type": {
            "type": "string"
          }
        },
        "example": {
          "id": "1ad0b5f8-95ac-4d6c-8562-8fdb209c86c3",
          "type": "individual",
          "kyc_type": "light"
        }
      },
      "SAOfframpReceiverUpdateObject": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "success": true,
          "id": "1ad0b5f8-95ac-4d6c-8562-8fdb209c86c3"
        }
      },
      "SAOfframpReceiverGetObject": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "example": {
          "count": 0,
          "data": []
        }
      },
      "BrlOfframpPixAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "c26f5827-9d43-4bf0-88f4-9817c9cceb84"
        }
      },
      "CopOfframpAchCopAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "c26f5827-9d43-4bf0-88f4-9817c9cceb84"
        }
      },
      "MxnOfframpSpeiAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "c26f5827-9d43-4bf0-88f4-9817c9cceb84"
        }
      },
      "ArsOfframpTransfersAccountObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "invalidFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "status": "ACTIVE",
          "invalidFields": [],
          "message": "Account created successfully",
          "id": "c26f5827-9d43-4bf0-88f4-9817c9cceb84"
        }
      },
      "AccountObject": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "accountType": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "rail": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string"
              },
              "railType": {
                "type": "string"
              },
              "paymentRail": {
                "type": "string"
              }
            }
          }
        },
        "example": {
          "accountId": "4d9fed63-17e3-4c08-a91e-6e08d0133af0",
          "userId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
          "createdAt": "2024-08-07T15:52:23.093947+00:00",
          "accountType": "SAVINGS",
          "accountNumber": "1111",
          "routingNumber": "011401533",
          "bankName": "Bank of America",
          "rail": {
            "currency": "usd",
            "railType": "onramp",
            "paymentRail": "ach"
          }
        }
      },
      "AllAccountObjects": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "banks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string"
                },
                "accountType": {
                  "type": "string"
                },
                "businessIdentifierCode": {
                  "type": "string"
                },
                "accountNumber": {
                  "type": "string"
                },
                "routingNumber": {
                  "type": "string"
                },
                "accountHolderName": {
                  "type": "string"
                },
                "accountHolderCity": {
                  "type": "string"
                },
                "accountHolderCountry": {
                  "type": "string"
                },
                "accountHolderStreetLine1": {
                  "type": "string"
                },
                "accountHolderStateProvinceRegion": {
                  "type": "string"
                },
                "accountHolderPostalCode": {
                  "type": "string"
                },
                "bankCountry": {
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                },
                "rail": {
                  "type": "object",
                  "properties": {
                    "currency": {
                      "type": "string"
                    },
                    "railType": {
                      "type": "string"
                    },
                    "paymentRail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "count": 1,
          "banks": [
            {
              "accountId": "3032c480-f4e9-462e-ab97-39984bd92c31",
              "createdAt": "2024-08-07T15:53:05.571061+00:00",
              "status": "pending",
              "accountType": "us",
              "businessIdentifierCode": "021000021",
              "accountNumber": "123456789012",
              "routingNumber": "021000021",
              "accountHolderName": "Post Man",
              "accountHolderCity": "New York",
              "accountHolderCountry": "US",
              "accountHolderStreetLine1": "123 Main St",
              "accountHolderStateProvinceRegion": "NY",
              "accountHolderPostalCode": "10001",
              "bankCountry": "US",
              "userId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
              "rail": {
                "currency": "usd",
                "railType": "offramp",
                "paymentRail": "wire"
              }
            }
          ]
        }
      },
      "VirtualAccountObject": {
        "type": "object",
        "properties": {
          "virtualAccountId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "paymentRails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sourceCurrency": {
            "type": "string"
          },
          "destinationChain": {
            "type": "string"
          },
          "destinationCurrency": {
            "type": "string"
          },
          "destinationWalletAddress": {
            "type": "string"
          },
          "railStatus": {
            "type": "string"
          },
          "depositInstructions": {
            "type": "object",
            "properties": {
              "bankName": {
                "type": "string"
              },
              "routingNumber": {
                "type": "string"
              },
              "accountNumber": {
                "type": "string"
              },
              "bankAddress": {
                "type": "string"
              }
            }
          },
          "microDeposits": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "eventId": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "amount": {
                      "type": "string"
                    },
                    "sourceBankAccountDetails": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "bankName": {
                          "type": "string"
                        },
                        "routingNumber": {
                          "type": "string"
                        },
                        "traceNumber": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "virtualAccountId": "21593434-eb2a-4e44-a4d7-fc5700acd8a2",
          "userId": "75d7c01f-5f93-43434-8b93-a62fd8020358",
          "paymentRails": [
            "ach_push",
            "wire"
          ],
          "sourceCurrency": "usd",
          "destinationChain": "POLYGON_MAINNET",
          "destinationCurrency": "usdc",
          "destinationWalletAddress": "0xBe64088c19d2F06890343bbE03A6125D7A23dec5",
          "railStatus": "activated",
          "depositInstructions": {
            "bankName": "Lead Bank",
            "routingNumber": "101023444",
            "accountNumber": "223401218467",
            "bankAddress": "1801 Main St., Kansas City, MO 64108"
          },
          "microDeposits": {
            "count": 1,
            "data": [
              {
                "eventId": "8b2e2301-9e9b-40bd-12b7-a189ba73d517",
                "currency": "usd",
                "createdAt": "2024-05-15T12:38:55.841Z",
                "amount": "-0.36",
                "sourceBankAccountDetails": {
                  "description": "ACCTVERIFY CHARLES SCHWAB 5023447 223513 [Mick Burger]",
                  "bankName": "CHARLES SCHWAB",
                  "routingNumber": "032341114",
                  "traceNumber": "03123434516328"
                }
              }
            ]
          }
        }
      },
      "Unauthorized": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not authorized"
          }
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not Found"
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unexpected error happened"
          }
        }
      },
      "Pong": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "pong"
          }
        }
      },
      "CryptoToCryptoTransfer": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "senderUserId": {
            "type": "string",
            "description": "User Id of the sender"
          },
          "recipientUserId": {
            "type": "string",
            "description": "User Id of the recipient (should either provide recipientUserId or recipientAddress)"
          },
          "recipientAddress": {
            "type": "string",
            "description": "wallet address of the recipient (should either provide recipientUserId or recipientAddress)"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "senderUserId",
          "amount",
          "requestId",
          "chain",
          "currency"
        ]
      },
      "ACHCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to USD (ACH)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "sameDayAch": {
            "type": "boolean",
            "description": "Routes offramp for same day ACH transfer for a $1 additional fee"
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          },
          "achReference": {
            "type": "string",
            "description": "A reference message to be sent with an ACH transaction. It can be at most 10 characters, A-Z, a-z, 0-9, and spaces. Note that as of 2024-08-06, setting this field is only supported for certain developers while we work on rolling out general support for everyone."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "SEPACryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to EUR (SEPA)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "eur"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          },
          "sepaReference": {
            "type": "string",
            "description": "A reference message to be sent with a SEPA transaction. It must be from 6 to 140 characters. The allowed characters are a-z, A-Z, 0-9, spaces, ampersand (&), hyphen (-), full stop (.), and solidus (/)."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "WIRECryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to Fiat (WIRE)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "usd",
              "eur",
              "brl",
              "mxn",
              "ars",
              "cop"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          },
          "wireMessage": {
            "type": "string",
            "description": "A message to be sent with a wire transfer, only allowed when the payment rail is a wire. This message will be validated against 4 lines, each with a max length of 35 char according to the Fedwire standard."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "PIXCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to BRL (PIX)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "brl"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "SPEICryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to MXN (SPEI)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "mxn"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "TRANSFERSCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to ARS (TRANSFERS)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "ars"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "ACH_COPCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to COP (SPEI)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "cop"
            ]
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "SWIFTCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to Fiat (SWIFT)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "usd",
              "eur",
              "brl",
              "mxn",
              "ars",
              "cop"
            ]
          },
          "swiftReference": {
            "type": "string",
            "description": "A payment reference message or remittance information to be included in a SWIFT transaction. It can have at most 4 lines (separated by \"\\n\"), each line with a max length of 35 chars. The allowed characters are a-z, A-Z, 0-9, special characters (/ - ? : ( ) . , ' +), and spaces.\n"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "paymentRail"
        ]
      },
      "MOMO_KESCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to KES (MOMO KES)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "kes"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "MOMO_XOFCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to XOF (MOMO XOF)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "xof"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "MOMO_RWFCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to RWF (MOMO RWF)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "rwf"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "MOMO_ZMWCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to ZMW (MOMO ZMW)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "zmw"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "BANK_NGNCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to NGN (BANK NGN)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "ngn"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "BANK_UGXCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to UGX (BANK UGX)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "ugx"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "BANK_TZSCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to TZS (BANK TZS)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "tzs"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "BANK_MWKCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to MWK (BANK MWK)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "mwk"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "BANK_XAFCryptoToFiatTransfer": {
        "type": "object",
        "title": "Crypto to XAF (BANK XAF)",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string"
          },
          "destinationUserId": {
            "type": "string",
            "description": "If destination account was created under the sourceUserId, the destinationUserId will be the same id. You can specify a different destinationUserId if offramping to a bank account created under a different userId than the sender."
          },
          "destinationAccountId": {
            "type": "string",
            "description": "Account Id of the destination bank account"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY"
            ]
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "xaf"
            ]
          },
          "purposeOfPayment": {
            "type": "string",
            "description": "Purpose of Payment. e.g. Payment for Goods."
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "destinationAccountId",
          "amount",
          "chain",
          "sourceCurrency",
          "destinationCurrency",
          "purposeOfPayment"
        ]
      },
      "FiatToCryptoTransfer": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string",
            "description": "User which will be pull the fiat bank account from"
          },
          "sourceAccountId": {
            "type": "string",
            "description": "Account Id of the source bank account"
          },
          "destinationUserId": {
            "type": "string",
            "description": "User which will be receiving the crypto"
          },
          "sourceCurrency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "destinationCurrency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "usdHifi"
            ],
            "description": "note: usdHifi is only available in sandbox to simulate token movement."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "chain": {
            "type": "string",
            "description": "Choose POLYGON_MAINNET for production, POLYGON_AMOY for sandbox.",
            "enum": [
              "POLYGON_MAINNET",
              "POLYGON_AMOY",
              "ETHEREUM_MAINNET"
            ]
          },
          "isInstant": {
            "type": "boolean",
            "description": "(Not implemented yet)",
            "default": false
          },
          "feeType": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIX"
            ]
          },
          "feeValue": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "description": "note: 0.01 equals to 1% when feeType is set to PERCENT, checkout https://docs.hifibridge.com/docs/fee-collection for more information)"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "destinationUserId",
          "amount",
          "sourceCurrency",
          "destinationCurrency",
          "chain",
          "sourceAccountId",
          "isInstant"
        ]
      },
      "FiatToFiatTransfer": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string",
            "description": "User who owns the USD onramp Plaid bank account specified by the `sourceAccountId`.\n"
          },
          "sourceAccountId": {
            "type": "string",
            "description": "Account Id of the USD onramp Plaid bank account."
          },
          "accountNumber": {
            "type": "string"
          },
          "routingNumber": {
            "type": "string"
          },
          "recipientName": {
            "type": "string",
            "description": "Name of the recipient."
          },
          "type": {
            "type": "string",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "BUSINESS"
            ]
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "enum": [
              "usd"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "requestId",
          "sourceUserId",
          "sourceAccountId",
          "accountNumber",
          "routingNumber",
          "recipientName",
          "type",
          "amount",
          "currency"
        ]
      },
      "CryptoToCryptoTransferObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "senderUserId": {
                "type": "string"
              },
              "recipientUserId": {
                "type": "string"
              },
              "recipientAddress": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "currency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "transactionHash": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Status of the transfer. See [Transfer](https://docs.hifibridge.com/docs/core-api-transfer) for more details.\n\n`CREATED`, `ACCEPTED`, `SUBMITTED`, `CONFIRMED`, `FAILED`, `PENDING`\n"
              },
              "contractAddress": {
                "type": "string"
              },
              "failedReason": {
                "type": "string"
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "CRYPTO_TO_CRYPTO",
          "transferDetails": {
            "id": "0b9a8c80-3ce3-weee-9d94-8a8ac43a2543",
            "requestId": "5d0a55aa-9a2a-486a-a57e-d5d9e576cf6d",
            "senderUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
            "recipientUserId": "0c91a2a3-b0da-4779-bd15-2b29b8854de4",
            "recipientAddress": "0x89dfD8792c7E7041c24F01223929F1d8Dd642F0c",
            "chain": "POLYGON_MAINNET",
            "currency": "usdc",
            "amount": 10,
            "transactionHash": "0x23188ac9f798d97d481f8684jgk4a74cd885ed8bcff9d52d8bb7c3a2f54a3a59",
            "createdAt": "2024-06-25T20:41:57.671322+00:00",
            "status": "SUBMITTED",
            "contractAddress": "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
            "failedReason": "",
            "fee": {
              "feeId": "15698c9b-6761-42ef-8c0c-96f5f983ba7d",
              "feeType": "FIX",
              "feeAmount": 0.01,
              "feePercent": 0,
              "status": "CONFIRMED",
              "transactionHash": "0x23188ac9f798d97d481f8684jgk4a74cd885ed8bcff9d52d8bb7c3a2f54a3a59",
              "failedReason": null
            }
          }
        }
      },
      "CryptoToFiatTransferObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "sourceCurrency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "destinationAccountId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Status of the transfer. See [Transfer](https://docs.hifibridge.com/docs/core-api-transfer) for more details.\n\n`NOT_INITIATED`, `CREATED`, `SUBMITTED_ONCHAIN`, `COMPLETED_ONCHAIN`, `IN_PROGRESS_FIAT`, `INITIATED_FIAT`, `COMPLETED`, `FAILED_ONCHAIN`, \n`FAILED_FIAT_RETURNED`, `FAILED_FIAT_REFUNDED`, `FAILED_UNKNOWN`\n"
              },
              "contractAddress": {
                "type": "string"
              },
              "sourceUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "destinationUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "destinationAccount": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "accountOwnerName": {
                    "type": "string"
                  },
                  "bankName": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "routingNumber": {
                    "type": "string"
                  },
                  "accountType": {
                    "type": "string"
                  },
                  "businessIdentifierCode": {
                    "type": "string",
                    "nullable": true
                  },
                  "bankCountry": {
                    "type": "string",
                    "nullable": true
                  },
                  "iban": {
                    "type": "string",
                    "nullable": true
                  },
                  "beneficiaryFirstName": {
                    "type": "string",
                    "nullable": true
                  },
                  "beneficiaryLastName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "ConversionRate": {
                "type": "object",
                "properties": {
                  "validFrom": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "toCurrency": {
                    "type": "string"
                  },
                  "validUntil": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "fromCurrency": {
                    "type": "string"
                  },
                  "conversionRate": {
                    "type": "number",
                    "format": "float"
                  }
                }
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "CRYPTO_TO_FIAT",
          "transferDetails": {
            "id": "7b7e012e-5c19-4398-b5c0-158ac6dd4fe6",
            "requestId": "0ac9c021-021e-4253-af31-2a3867024a8a",
            "sourceUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
            "destinationUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
            "chain": "POLYGON_MAINNET",
            "sourceCurrency": "usdc",
            "amount": 1.23,
            "destinationCurrency": "usd",
            "liquidationAddress": null,
            "destinationAccountId": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
            "transactionHash": null,
            "createdAt": "2024-08-11T03:35:30.921875+00:00",
            "updatedAt": "2024-08-11T03:35:30.921875+00:00",
            "status": "CREATED",
            "contractAddress": 3.441810188089762e+47,
            "sourceUser": {
              "businessName": null,
              "legalLastName": "YANG",
              "complianceEmail": "william@hifibridge.com",
              "legalFirstName": "William"
            },
            "destinationUser": {
              "businessName": null,
              "legalLastName": "YANG",
              "complianceEmail": "william@hifibridge.com",
              "legalFirstName": "William"
            },
            "destinationAccount": {
              "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
              "accountOwnerName": "Wei Yu, Yang",
              "bankName": "Bank of Aerica",
              "accountNumber": 483101817874,
              "routingNumber": 21000322,
              "accountType": "us",
              "businessIdentifierCode": null,
              "bankCountry": null,
              "iban": null,
              "beneficiaryFirstName": null,
              "beneficiaryLastName": null
            },
            "failedReason": null,
            "fee": {
              "feeId": "20719aea-411f-4e0a-b377-61163c09435a",
              "feeType": "PERCENT",
              "feeAmount": 0.01,
              "feePercent": 0.01,
              "status": "CREATED",
              "transactionHash": null,
              "failedReason": null
            },
            "conversionRate": {
              "validFrom": "2024-08-11T03:35:30.809Z",
              "toCurrency": "usd",
              "validUntil": "2024-08-11T03:36:00.809Z",
              "fromCurrency": "usdc",
              "conversionRate": 1
            }
          }
        }
      },
      "FiatToCryptoTransferObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "sourceUserId": {
                "type": "string"
              },
              "destinationUserId": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "sourceCurrency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "sourceAccountId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Status of the transfer. See [Transfer](https://docs.hifibridge.com/docs/core-api-transfer) for more details.\n\n`CREATED`, `FIAT_SUBMITTED`, `FIAT_PROCESSED`, `FIAT_CONFIRMED`, `CRYPTO_IN_REVIEW`, `CRYPTO_SUBMITTED`, `CONFIRMED`, `REFUNDED`, `FAILED`, `FAILED_UNKNOWN`\n"
              },
              "isInstant": {
                "type": "boolean"
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "FIAT_TO_CRYPTO",
          "transferDetails": {
            "id": "0ed5e5f7-6f3d-49c3-bbd1-fc7682119d35",
            "requestId": "1533b435-0d57-43f4-8e05-0f4f6730a219",
            "sourceUserId": "7d2150ce-bdc4-442d-899e-800c48ba3954",
            "destinationUserId": "7d2150ce-bdc4-442d-899e-800c48ba3954",
            "chain": "POLYGON_AMOY",
            "sourceCurrency": "usd",
            "amount": 1,
            "destinationCurrency": "usdc",
            "sourceAccountId": "8ff3c91f-54e9-45ea-939b-23523ecc4ae4",
            "createdAt": "2024-07-26T14:52:43.893588+00:00",
            "status": "FIAT_SUBMITTED",
            "isInstant": false,
            "fee": null
          }
        }
      },
      "CryptoToCryptoRecordObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "senderUserId": {
                "type": "string"
              },
              "recipientUserId": {
                "type": "string"
              },
              "recipientAddress": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "currency": {
                "type": "string"
              },
              "transactionHash": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "contractAddress": {
                "type": "string"
              },
              "recipient": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "sender": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "CRYPTO_TO_CRYPTO",
          "transferDetails": {
            "id": "d664b6f0-f490-4bba-93bf-5343013e22ed",
            "requestId": "4782e4cf-7b36-4fbf-ae01-5095c2145b71",
            "senderUserId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
            "recipientUserId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
            "recipientAddress": "0xF3D07a6B4a449431e1489A44e732AA90CeB94A8D",
            "chain": "POLYGON_MAINNET",
            "currency": "usdc",
            "transactionHash": "0xd2f14a064ae8c7509a14597c374a63172f682cfa5fd37b6bf32edd334d52064e",
            "createdAt": "2024-08-07T18:04:02.29743+00:00",
            "updatedAt": "2024-08-07T18:04:04.225+00:00",
            "status": "CONFIRMED",
            "contractAddress": "0x41e94eb019c0762f9bfcf9fb1e58725bfb0e7582",
            "recipient": {
              "businessName": null,
              "legalLastName": "Wu",
              "complianceEmail": "henry@hifibridge.com",
              "legalFirstName": "Henry"
            },
            "sender": {
              "businessName": null,
              "legalLastName": "Gutix",
              "complianceEmail": "maxg@gmail.com",
              "legalFirstName": "Max"
            },
            "fee": {
              "feeId": "c44b6d91-eb77-4a64-9b6e-99f32f6a5566",
              "feeType": "PERCENT",
              "feeAmount": 0.01,
              "feePercent": 0.0001,
              "status": "CONFIRMED",
              "transactionHash": "0xd2f14a064ae8c7509a14597c374a63172f682cfa5fd37b6bf32edd334d52064e",
              "failedReason": null
            }
          }
        }
      },
      "CryptoToFiatRecordObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "sourceUserId": {
                "type": "string"
              },
              "destinationUserId": {
                "type": "string"
              },
              "chain": {
                "type": "string"
              },
              "sourceCurrency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "liquidationAddress": {
                "type": "string"
              },
              "destinationAccountId": {
                "type": "string"
              },
              "transactionHash": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "contractAddress": {
                "type": "string"
              },
              "sourceUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "destinationUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "destinationAccount": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "accountOwnerName": {
                    "type": "string"
                  },
                  "bankName": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "routingNumber": {
                    "type": "string"
                  },
                  "accountType": {
                    "type": "string"
                  },
                  "businessIdentifierCode": {
                    "type": "string",
                    "nullable": true
                  },
                  "bankCountry": {
                    "type": "string",
                    "nullable": true
                  },
                  "iban": {
                    "type": "string",
                    "nullable": true
                  },
                  "beneficiaryFirstName": {
                    "type": "string",
                    "nullable": true
                  },
                  "beneficiaryLastName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "conversionRate": {
                "$ref": "#/components/schemas/CryptoToFiatConversionRateObject"
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "CRYPTO_TO_FIAT",
          "transferDetails": {
            "id": "7b7e012e-5c19-4398-b5c0-158ac6dd4fe6",
            "requestId": "0ac9c021-021e-4253-af31-2a3867024a8a",
            "sourceUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
            "destinationUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
            "chain": "POLYGON_MAINNET",
            "sourceCurrency": "usdc",
            "amount": 1.23,
            "destinationCurrency": "usd",
            "liquidationAddress": null,
            "destinationAccountId": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
            "transactionHash": null,
            "createdAt": "2024-08-11T03:35:30.921875+00:00",
            "updatedAt": "2024-08-11T03:35:30.921875+00:00",
            "status": "CREATED",
            "contractAddress": 3.441810188089762e+47,
            "sourceUser": {
              "businessName": null,
              "legalLastName": "YANG",
              "complianceEmail": "william@hifibridge.com",
              "legalFirstName": "William"
            },
            "destinationUser": {
              "businessName": null,
              "legalLastName": "YANG",
              "complianceEmail": "william@hifibridge.com",
              "legalFirstName": "William"
            },
            "destinationAccount": {
              "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
              "accountOwnerName": "Wei Yu, Yang",
              "bankName": "Bank of Aerica",
              "accountNumber": 483101817874,
              "routingNumber": 21000322,
              "accountType": "us",
              "businessIdentifierCode": null,
              "bankCountry": null,
              "iban": null,
              "beneficiaryFirstName": null,
              "beneficiaryLastName": null
            },
            "failedReason": null,
            "fee": {
              "feeId": "20719aea-411f-4e0a-b377-61163c09435a",
              "feeType": "PERCENT",
              "feeAmount": 0.01,
              "feePercent": 0.01,
              "status": "CREATED",
              "transactionHash": null,
              "failedReason": null
            },
            "conversionRate": {
              "validFrom": "2024-08-11T03:35:30.809Z",
              "toCurrency": "usd",
              "validUntil": "2024-08-11T03:36:00.809Z",
              "fromCurrency": "usdc",
              "conversionRate": 1
            }
          }
        }
      },
      "FiatToCryptoRecordObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "sourceUserId": {
                "type": "string"
              },
              "destinationUserId": {
                "type": "string"
              },
              "transactionHash": {
                "type": "string",
                "nullable": true
              },
              "chain": {
                "type": "string"
              },
              "sourceCurrency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "sourceAccountId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "sourceUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "destinationUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  },
                  "legalFirstName": {
                    "type": "string"
                  }
                }
              },
              "sourceAccount": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "accountNumber": {
                    "type": "string"
                  },
                  "routingNumber": {
                    "type": "string"
                  },
                  "bankName": {
                    "type": "string"
                  }
                }
              },
              "fee": {
                "$ref": "#/components/schemas/FeeObject"
              }
            }
          }
        },
        "example": {
          "transferType": "FIAT_TO_CRYPTO",
          "transferDetails": {
            "id": "2f7803d0-568e-47dc-9fa8-5870e1a7556b",
            "requestId": "244eca98-3c4c-4056-8ba4-ca0246b9bd51",
            "sourceUserId": "985b714b-513f-4b48-9710-4298c7bfe84c",
            "destinationUserId": "985b714b-513f-4b48-9710-4298c7bfe84c",
            "transactionHash": null,
            "chain": "POLYGON_MAINNET",
            "sourceCurrency": "usd",
            "amount": 1,
            "destinationCurrency": "usdc",
            "sourceAccountId": "95e2ade1-53bb-4f9e-ac04-12a2de2a910d",
            "createdAt": "2024-07-27T03:04:37.488762+00:00",
            "updatedAt": "2024-08-07T18:03:01.704+00:00",
            "status": "FIAT_PROCESSED",
            "sourceUser": {
              "businessName": null,
              "legalLastName": "Wu",
              "complianceEmail": "henry@hifibridge.com",
              "legalFirstName": "Henry"
            },
            "destinationUser": {
              "businessName": null,
              "legalLastName": "Gutix",
              "complianceEmail": "maxg@gmail.com",
              "legalFirstName": "Max"
            },
            "sourceAccount": {
              "id": "95e2ade1-53bb-4f9e-ac04-12a2de2a910d",
              "accountNumber": "2374",
              "routingNumber": "021234322",
              "bankName": "Chase"
            },
            "fee": {
              "feeId": "c44b6d91-eb77-4a64-9b6e-99f32f6a5566",
              "feeType": "PERCENT",
              "feeAmount": 0.00011100000000000001,
              "feePercent": 0.0001,
              "status": "CONFIRMED",
              "transactionHash": 6.113897308527619e+76,
              "failedReason": null
            }
          }
        }
      },
      "FiatToFiatRecordObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "recipientName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "sourceAccountId": {
            "type": "string"
          }
        },
        "example": {
          "id": "0b9a8c80-3ce3-weee-9d94-8a8ac43a2543",
          "requestId": "5d0a55aa-9a2a-486a-a57e-d5d9e576cf6d",
          "createdAt": "2024-06-25T20:41:57.671322+00:00",
          "recipientName": "John Doe",
          "status": "CONFIRMED",
          "amount": 10,
          "currency": "usd",
          "sourceAccountId": "0a472717-039b-48bb-894a-a4fc914a1fe4"
        }
      },
      "CryptoToCryptoAllRecordsObject": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "transferType": {
                  "type": "string"
                },
                "transferDetails": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "requestId": {
                      "type": "string"
                    },
                    "senderUserId": {
                      "type": "string"
                    },
                    "recipientUserId": {
                      "type": "string"
                    },
                    "recipientAddress": {
                      "type": "string"
                    },
                    "chain": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "string"
                    },
                    "transactionHash": {
                      "type": "string",
                      "nullable": true
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string"
                    },
                    "contractAddress": {
                      "type": "string"
                    },
                    "recipient": {
                      "type": "object",
                      "properties": {
                        "businessName": {
                          "type": "string",
                          "nullable": true
                        },
                        "legalLastName": {
                          "type": "string"
                        },
                        "complianceEmail": {
                          "type": "string"
                        },
                        "legalFirstName": {
                          "type": "string"
                        }
                      }
                    },
                    "sender": {
                      "type": "object",
                      "properties": {
                        "businessName": {
                          "type": "string",
                          "nullable": true
                        },
                        "legalLastName": {
                          "type": "string"
                        },
                        "complianceEmail": {
                          "type": "string"
                        },
                        "legalFirstName": {
                          "type": "string"
                        }
                      }
                    },
                    "fee": {
                      "$ref": "#/components/schemas/FeeObject"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "count": 1,
          "records": [
            {
              "transferType": "CRYPTO_TO_CRYPTO",
              "transferDetails": {
                "id": "d664b6f0-f490-4bba-93bf-5343013e22ed",
                "requestId": "4782e4cf-7b36-4fbf-ae01-5095c2145b71",
                "senderUserId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
                "recipientUserId": "0a472717-039b-48bb-894a-a4fc914a1fe4",
                "recipientAddress": "0xF3D07a6B4a449431e1489A44e732AA90CeB94A8D",
                "chain": "POLYGON_MAINNET",
                "currency": "usdc",
                "transactionHash": "0xd2f14a064ae8c7509a14597c374a63172f682cfa5fd37b6bf32edd334d52064e",
                "createdAt": "2024-08-07T18:04:02.29743+00:00",
                "updatedAt": "2024-08-07T18:04:04.225+00:00",
                "status": "CONFIRMED",
                "contractAddress": "0x41e94eb019c0762f9bfcf9fb1e58725bfb0e7582",
                "recipient": {
                  "businessName": null,
                  "legalLastName": "Wu",
                  "complianceEmail": "henry@hifibridge.com",
                  "legalFirstName": "Henry"
                },
                "sender": {
                  "businessName": null,
                  "legalLastName": "Gutix",
                  "complianceEmail": "maxg@gmail.com",
                  "legalFirstName": "Max"
                },
                "fee": {
                  "feeId": "c44b6d91-eb77-4a64-9b6e-99f32f6a5566",
                  "feeType": "PERCENT",
                  "feeAmount": 0.01,
                  "feePercent": 0.0001,
                  "status": "CONFIRMED",
                  "transactionHash": "0xd2f14a064ae8c7509a14597c374a63172f682cfa5fd37b6bf32edd334d52064e",
                  "failedReason": null
                }
              }
            }
          ]
        }
      },
      "CryptoToFiatAllRecordsObject": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "transferType": {
                  "type": "string"
                },
                "transferDetails": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "requestId": {
                      "type": "string"
                    },
                    "sourceUserId": {
                      "type": "string"
                    },
                    "destinationUserId": {
                      "type": "string"
                    },
                    "chain": {
                      "type": "string"
                    },
                    "sourceCurrency": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "destinationCurrency": {
                      "type": "string"
                    },
                    "liquidationAddress": {
                      "type": "string"
                    },
                    "destinationAccountId": {
                      "type": "string"
                    },
                    "transactionHash": {
                      "type": "string",
                      "nullable": true
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string"
                    },
                    "contractAddress": {
                      "type": "string"
                    },
                    "sourceUser": {
                      "type": "object",
                      "properties": {
                        "businessName": {
                          "type": "string",
                          "nullable": true
                        },
                        "legalLastName": {
                          "type": "string"
                        },
                        "complianceEmail": {
                          "type": "string"
                        },
                        "legalFirstName": {
                          "type": "string"
                        }
                      }
                    },
                    "destinationUser": {
                      "type": "object",
                      "properties": {
                        "businessName": {
                          "type": "string",
                          "nullable": true
                        },
                        "legalLastName": {
                          "type": "string"
                        },
                        "complianceEmail": {
                          "type": "string"
                        },
                        "legalFirstName": {
                          "type": "string"
                        }
                      }
                    },
                    "destinationAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "accountOwnerName": {
                          "type": "string"
                        },
                        "bankName": {
                          "type": "string"
                        },
                        "accountNumber": {
                          "type": "string"
                        },
                        "routingNumber": {
                          "type": "string"
                        },
                        "accountType": {
                          "type": "string"
                        },
                        "businessIdentifierCode": {
                          "type": "string",
                          "nullable": true
                        },
                        "bankCountry": {
                          "type": "string",
                          "nullable": true
                        },
                        "iban": {
                          "type": "string",
                          "nullable": true
                        },
                        "beneficiaryFirstName": {
                          "type": "string",
                          "nullable": true
                        },
                        "beneficiaryLastName": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "fee": {
                      "$ref": "#/components/schemas/FeeObject"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "count": 1,
          "records": [
            {
              "transferType": "CRYPTO_TO_FIAT",
              "transferDetails": {
                "id": "7b7e012e-5c19-4398-b5c0-158ac6dd4fe6",
                "requestId": "0ac9c021-021e-4253-af31-2a3867024a8a",
                "sourceUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
                "destinationUserId": "75d7c01f-5f93-4490-8b93-a62fd8020358",
                "chain": "POLYGON_MAINNET",
                "sourceCurrency": "usdc",
                "amount": 1.23,
                "destinationCurrency": "usd",
                "liquidationAddress": null,
                "destinationAccountId": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
                "transactionHash": null,
                "createdAt": "2024-08-11T03:35:30.921875+00:00",
                "updatedAt": "2024-08-11T03:35:30.921875+00:00",
                "status": "CREATED",
                "contractAddress": 3.441810188089762e+47,
                "sourceUser": {
                  "businessName": null,
                  "legalLastName": "YANG",
                  "complianceEmail": "william@hifibridge.com",
                  "legalFirstName": "William"
                },
                "destinationUser": {
                  "businessName": null,
                  "legalLastName": "YANG",
                  "complianceEmail": "william@hifibridge.com",
                  "legalFirstName": "William"
                },
                "destinationAccount": {
                  "id": "daa6ad75-a4c2-486f-a937-1bbf4d19553c",
                  "accountOwnerName": "Wei Yu, Yang",
                  "bankName": "Bank of Aerica",
                  "accountNumber": 483101817874,
                  "routingNumber": 21000322,
                  "accountType": "us",
                  "businessIdentifierCode": null,
                  "bankCountry": null,
                  "iban": null,
                  "beneficiaryFirstName": null,
                  "beneficiaryLastName": null
                },
                "failedReason": null,
                "fee": {
                  "feeId": "20719aea-411f-4e0a-b377-61163c09435a",
                  "feeType": "PERCENT",
                  "feeAmount": 0.01,
                  "feePercent": 0.01,
                  "status": "CREATED",
                  "transactionHash": null,
                  "failedReason": null
                },
                "conversionRate": {
                  "validFrom": "2024-08-11T03:35:30.809Z",
                  "toCurrency": "usd",
                  "validUntil": "2024-08-11T03:36:00.809Z",
                  "fromCurrency": "usdc",
                  "conversionRate": 1
                }
              }
            }
          ]
        }
      },
      "FiatToCryptoAllRecordsObject": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "transferType": {
                  "type": "string"
                },
                "transferDetails": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "requestId": {
                      "type": "string"
                    },
                    "sourceUserId": {
                      "type": "string"
                    },
                    "destinationUserId": {
                      "type": "string"
                    },
                    "chain": {
                      "type": "string"
                    },
                    "sourceCurrency": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "destinationCurrency": {
                      "type": "string"
                    },
                    "sourceAccountId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string"
                    },
                    "isInstant": {
                      "type": "boolean"
                    },
                    "fee": {
                      "$ref": "#/components/schemas/FeeObject"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "count": 1,
          "records": [
            {
              "transferType": "FIAT_TO_CRYPTO",
              "transferDetails": {
                "id": "2f7803d0-568e-47dc-9fa8-5870e1a7556b",
                "requestId": "244eca98-3c4c-4056-8ba4-ca0246b9bd51",
                "sourceUserId": "985b714b-513f-4b48-9710-4298c7bfe84c",
                "destinationUserId": "985b714b-513f-4b48-9710-4298c7bfe84c",
                "transactionHash": null,
                "chain": "POLYGON_MAINNET",
                "sourceCurrency": "usd",
                "amount": 1,
                "destinationCurrency": "usdc",
                "sourceAccountId": "95e2ade1-53bb-4f9e-ac04-12a2de2a910d",
                "createdAt": "2024-07-27T03:04:37.488762+00:00",
                "updatedAt": "2024-08-07T18:03:01.704+00:00",
                "status": "FIAT_PROCESSED",
                "sourceUser": {
                  "businessName": null,
                  "legalLastName": "Wu",
                  "complianceEmail": "henry@hifibridge.com",
                  "legalFirstName": "Henry"
                },
                "destinationUser": {
                  "businessName": null,
                  "legalLastName": "Gutix",
                  "complianceEmail": "maxg@gmail.com",
                  "legalFirstName": "Max"
                },
                "sourceAccount": {
                  "id": "95e2ade1-53bb-4f9e-ac04-12a2de2a910d",
                  "accountNumber": "2374",
                  "routingNumber": "021234322",
                  "bankName": "Chase"
                },
                "fee": {
                  "feeId": "c44b6d91-eb77-4a64-9b6e-99f32f6a5566",
                  "feeType": "PERCENT",
                  "feeAmount": 0.00011100000000000001,
                  "feePercent": 0.0001,
                  "status": "CONFIRMED",
                  "transactionHash": 6.113897308527619e+76,
                  "failedReason": null
                }
              }
            }
          ]
        }
      },
      "CryptoToFiatConversionRateObject": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string"
          },
          "toCurrency": {
            "type": "string"
          },
          "conversionRate": {
            "type": "number"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "fromCurrency": "usdc",
          "toCurrency": "usd",
          "conversionRate": 1,
          "validFrom": "2024-08-07T18:02:50.815Z",
          "validUntil": "2024-08-07T18:03:20.815Z"
        }
      },
      "FeeObject": {
        "type": "object",
        "properties": {
          "feeId": {
            "type": "string",
            "format": "uuid"
          },
          "feeType": {
            "type": "string",
            "enum": [
              "FIX",
              "PERCENTAGE"
            ]
          },
          "feeAmount": {
            "type": "number",
            "format": "float"
          },
          "feePercent": {
            "type": "number",
            "format": "float"
          },
          "status": {
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          },
          "failedReason": {
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "feeId": "15698c9b-6761-42ef-8c0c-96f5f983ba7d",
          "feeType": "FIX",
          "feeAmount": 0.01,
          "feePercent": 0,
          "status": "CONFIRMED",
          "transactionHash": 6.60017588418924e+76,
          "failedReason": null
        }
      },
      "AcceptFiatToCryptoQuoteObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "requestId": {
                "type": "string",
                "format": "uuid"
              },
              "sourceUserId": {
                "type": "string",
                "format": "uuid"
              },
              "destinationUserId": {
                "type": "string",
                "format": "uuid"
              },
              "chain": {
                "type": "string"
              },
              "sourceCurrency": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "destinationCurrency": {
                "type": "string"
              },
              "liquidationAddress": {
                "type": "string",
                "nullable": true
              },
              "destinationAccountId": {
                "type": "string",
                "format": "uuid"
              },
              "transactionHash": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "contractAddress": {
                "type": "string"
              },
              "sourceUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalFirstName": {
                    "type": "string"
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  }
                }
              },
              "destinationUser": {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "nullable": true
                  },
                  "legalFirstName": {
                    "type": "string"
                  },
                  "legalLastName": {
                    "type": "string"
                  },
                  "complianceEmail": {
                    "type": "string"
                  }
                }
              },
              "destinationAccount": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "type": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "pixKey": {
                    "type": "string"
                  }
                }
              },
              "failedReason": {
                "type": "string",
                "nullable": true
              },
              "fee": {
                "type": "number",
                "nullable": true
              },
              "conversionRate": {
                "type": "object",
                "properties": {
                  "fromCurrency": {
                    "type": "string"
                  },
                  "toCurrency": {
                    "type": "string"
                  },
                  "conversionRate": {
                    "type": "number"
                  },
                  "vaildFrom": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "vaildUntil": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "quoteInformation": {
                "type": "object",
                "properties": {
                  "fromCurrency": {
                    "type": "string"
                  },
                  "toCurrency": {
                    "type": "string"
                  },
                  "vaildFrom": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "vaildUntil": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "sendingAmount": {
                    "type": "number"
                  },
                  "receivingAmount": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "example": {
          "transferType": "CRYPTO_TO_FIAT",
          "transferDetails": {
            "id": "e9044d6c-6683-492c-b206-2adbb75c5022",
            "requestId": "3da09d1a-13f2-40a0-9cb3-2628da485g93",
            "sourceUserId": "9010c7fc-9k1a-4924-a0bf-449cec4fba64",
            "destinationUserId": "9020c7fc-9f1a-4924-b0bf-449cek4fba64",
            "chain": "POLYGON_AMOY",
            "sourceCurrency": "usdc",
            "amount": 10,
            "destinationCurrency": "brl",
            "liquidationAddress": null,
            "destinationAccountId": "a69ec62c-7b42-4f63-9945-920eca3ad91e",
            "transactionHash": null,
            "createdAt": "2024-09-09T14:28:40.780154+00:00",
            "updatedAt": "2024-09-09T14:28:40.780154+00:00",
            "status": "CREATED",
            "contractAddress": "0x4D423D2cfB373862B8E12843B6175752dc75f795",
            "sourceUser": {
              "businessName": null,
              "legalFirstName": "Henry",
              "legalLastName": "Wu",
              "complianceEmail": "henry@hifibridge.com"
            },
            "destinationUser": {
              "businessName": null,
              "legalFirstName": "Sam",
              "legalLastName": "Yoon",
              "complianceEmail": "sam@hifibridge.com"
            },
            "destinationAccount": {
              "id": "a69ec62c-7b42-4f63-9945-920eca3ad91e",
              "type": "pix",
              "name": "Bank Account Name",
              "pixKey": "14947677768"
            },
            "failedReason": null,
            "fee": null,
            "conversionRate": {
              "fromCurrency": "usdc",
              "toCurrency": "brl",
              "conversionRate": 5.5539,
              "vaildFrom": "2024-09-09T14:29:40.898Z",
              "vaildUntil": "2024-09-09T14:33:42.827Z"
            },
            "quoteInformation": {
              "fromCurrency": "usdc",
              "toCurrency": "brl",
              "vaildFrom": "2024-09-09T14:29:40.898Z",
              "vaildUntil": "2024-09-09T14:33:42.827Z",
              "sendingAmount": 10,
              "receivingAmount": 55.54
            }
          }
        }
      },
      "BridgeAssetTransfer": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the transfer request (recommend using uuid v4)"
          },
          "sourceUserId": {
            "type": "string",
            "description": "User Id of the sender"
          },
          "destinationUserId": {
            "type": "string",
            "description": "User Id of the recipient"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "sourceChain": {
            "type": "string",
            "description": "Chain where the source asset is",
            "enum": [
              "POLYGON_MAINNET",
              "ETHEREUM_MAINNET"
            ]
          },
          "destinationChain": {
            "type": "string",
            "description": "Chain where the asset will be bridged to",
            "enum": [
              "POLYGON_MAINNET",
              "ETHEREUM_MAINNET"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc"
            ]
          }
        },
        "required": [
          "sourceUserId",
          "destinationUserId",
          "amount",
          "requestId",
          "sourceChain",
          "currency",
          "destinationChain"
        ]
      },
      "BridgeAssetTransferObject": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string"
          },
          "transferDetails": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "requestId": {
                "type": "string"
              },
              "sourceUserId": {
                "type": "string"
              },
              "destinationUserId": {
                "type": "string"
              },
              "sourceChain": {
                "type": "string"
              },
              "destinationChain": {
                "type": "string"
              },
              "sourceWalletAddress": {
                "type": "string"
              },
              "destinationWalletAddress": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "currency": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "description": "Status of the transfer. Possible values:\n\n`CREATED`, `PROCESSING`, `COMPLETED`, `FAILED`\n"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "transactionHash": {
                "type": "object",
                "properties": {
                  "APPROVE_TO_TOKEN_MESSENGER": {
                    "type": "string",
                    "nullable": true
                  },
                  "BURN_USDC_ON_SOURCE_CHAIN": {
                    "type": "string",
                    "nullable": true
                  },
                  "RECEIVE_MESSAGE_AND_MINT": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "failedReason": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "example": {
          "transferType": "BRIDGE_ASSET",
          "transferDetails": {
            "id": "5e87372e-b5dc-4735-9bc3-b4fde3a0a398",
            "requestId": "3da09d1a-13f2-40a0-9cb3-2628da485g93",
            "sourceUserId": "8f766843-5a41-4799-8c20-29906a212f66",
            "destinationUserId": "b7f624a9-b960-421f-a64f-d253a5210ae5",
            "sourceChain": "ETHEREUM_MAINNET",
            "destinationChain": "POLYGON_MAINNET",
            "sourceWalletAddress": "0xb1ec8f89efd7363a1b939bfe545d2fca01bb7381",
            "destinationWalletAddress": "0x0865F3F871FbB227D52abEFdBEa9Af549Def664d",
            "amount": 10,
            "currency": "usdc",
            "status": "COMPLETED",
            "createdAt": "2024-10-15T19:51:11.295724+00:00",
            "updatedAt": "2024-10-15T19:55:32.448+00:00",
            "transactionHash": {
              "APPROVE_TO_TOKEN_MESSENGER": "0xd0741af0d7d9b9356b74a32f78d9f43472cfafbf08850c4bf6b4398a031ec9d6",
              "BURN_USDC_ON_SOURCE_CHAIN": "0x077e54e32f5e4bf295614749a12bd13e21f34f07a646377db7bcbdfb3f9c4c48",
              "RECEIVE_MESSAGE_AND_MINT": "0x077e54e32f5e4bf295614749a12bd13e21f34f07a646377db7bcbdfb3f9c4c48"
            },
            "failedReason": null
          }
        }
      },
      "IndividualUserKycOneCreate": {
        "type": "object",
        "title": "Create Individual User (KYC Level 1)",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "The KYC level of the user. Possible values are 1 and 2.",
            "enum": [
              1
            ]
          },
          "userType": {
            "type": "string",
            "enum": [
              "individual"
            ]
          },
          "legalFirstName": {
            "type": "string"
          },
          "legalLastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd.",
            "format": "date"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user. \n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          }
        },
        "required": [
          "kycLevel",
          "userType",
          "legalFirstName",
          "legalLastName",
          "dateOfBirth"
        ]
      },
      "IndividualUserKycTwoCreate": {
        "type": "object",
        "title": "Create Individual User (KYC Level 2)",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "The KYC level of the user. Possible values are 1 and 2.",
            "enum": [
              2
            ]
          },
          "userType": {
            "type": "string",
            "enum": [
              "individual"
            ]
          },
          "legalFirstName": {
            "type": "string"
          },
          "legalLastName": {
            "type": "string"
          },
          "complianceEmail": {
            "type": "string",
            "description": "E-mail address for compliance-related communications.",
            "format": "email"
          },
          "compliancePhone": {
            "type": "string",
            "description": "Phone number in format \"+12223334444\"."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd.",
            "format": "date"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvinceRegion": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions."
          },
          "postalCode": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes."
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec."
          },
          "signedAgreementId": {
            "type": "string",
            "description": "ID of the signed agreement, fetched through the HIFI's Hosted Terms of Service Link POST /tos-link."
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user. \n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          },
          "govIdFront": {
            "type": "string",
            "description": "URL of image of the front of the user's government issued ID.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "govIdBack": {
            "type": "string",
            "description": "Not required for passports. Required for all other ID types. URL of image of the back of the user's government issued ID.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "govIdCountry": {
            "type": "string",
            "description": "Alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec. Note that the government ID may be different from the 'country' above.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n"
          },
          "proofOfResidency": {
            "type": "string",
            "description": "URL of the file of the proof of residency.\nUtility bills and bank statements are recommended for proof of address.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          }
        },
        "required": [
          "kycLevel",
          "userType",
          "legalFirstName",
          "legalLastName",
          "complianceEmail",
          "compliancePhone",
          "dateOfBirth",
          "taxIdentificationNumber",
          "govIdFront",
          "govIdCountry",
          "country",
          "addressLine1",
          "city",
          "postalCode",
          "stateProvinceRegion",
          "signedAgreementId",
          "ipAddress",
          "proofOfResidency"
        ]
      },
      "BusinessUserKycOneCreate": {
        "type": "object",
        "title": "Create Business User (KYC Level 1)",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "The KYC level of the user. Possible values are 1 and 2.",
            "enum": [
              1
            ]
          },
          "userType": {
            "type": "string",
            "enum": [
              "business"
            ]
          },
          "businessName": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          },
          "ultimateBeneficialOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UltimateBeneficialOwnerKycOne"
            }
          }
        },
        "required": [
          "kycLevel",
          "userType",
          "businessName",
          "ipAddress",
          "ultimateBeneficialOwners"
        ]
      },
      "BusinessUserKycTwoCreate": {
        "type": "object",
        "title": "Create Business User (KYC Level 2)",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "The KYC level of the user. Possible values are 1 and 2.",
            "enum": [
              2
            ]
          },
          "userType": {
            "type": "string",
            "enum": [
              "business"
            ]
          },
          "businessName": {
            "type": "string"
          },
          "businessDescription": {
            "type": "string"
          },
          "businessType": {
            "type": "string",
            "description": "The type of business structure that most closely matches the business customer.",
            "enum": [
              "cooperative",
              "corporation",
              "llc",
              "partnership",
              "sole_prop",
              "trust",
              "other"
            ]
          },
          "complianceEmail": {
            "type": "string",
            "description": "Email address for compliance-related communications.",
            "format": "email"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
          },
          "website": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvinceRegion": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions."
          },
          "postalCode": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes."
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          },
          "signedAgreementId": {
            "type": "string",
            "description": "ID of the signed agreement, fetched through the HIFI's Hosted Terms of Service Link POST /tos-link"
          },
          "formationDoc": {
            "type": "string",
            "description": "URL of image of the formation documentation. \n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "proofOfOwnership": {
            "type": "string",
            "description": "URL of image of the ownership documentation.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "sourceOfFunds": {
            "type": "string",
            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc."
          },
          "transmitsCustomerFunds": {
            "type": "boolean",
            "description": "True if the business transmits funds on behalf of its customers (i.e. transmitsCustomerFunds == true)"
          },
          "complianceScreeningExplanation": {
            "type": "string",
            "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers."
          },
          "isDao": {
            "type": "boolean",
            "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
          },
          "ultimateBeneficialOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UltimateBeneficialOwnerKycTwo"
            }
          },
          "proofOfResidency": {
            "type": "string",
            "description": "URL of image of the proof of address that ties the owner's name to the provided address. Typically a utility bill or bank statement.\nRequired for businesses registered or operating in the EEA (European Economic Area).\nUtility bills and bank statements are recommended for proof of address.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          }
        },
        "required": [
          "kycLevel",
          "userType",
          "businessName",
          "businessType",
          "complianceEmail",
          "taxIdentificationNumber",
          "country",
          "addressLine1",
          "city",
          "postalCode",
          "stateProvinceRegion",
          "signedAgreementId",
          "ipAddress",
          "formationDoc",
          "sourceOfFunds",
          "ultimateBeneficialOwners",
          "transmitsCustomerFunds",
          "proofOfOwnership",
          "website",
          "businessDescription",
          "isDao",
          "proofOfResidency"
        ]
      },
      "IndividualUserUpdate": {
        "type": "object",
        "title": "Update Individual User",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "If provided, the KYC level of the user will be upgraded to the provided level and the user will be required to submit all the fields required for the new KYC level. \nYou can refer to the Create Individual User (KYC Level 2) endpoint for the required fields.\n\nCurrently you can only upgrade from KYC level 1 to 2.\n",
            "enum": [
              2
            ]
          },
          "legalFirstName": {
            "type": "string"
          },
          "legalLastName": {
            "type": "string"
          },
          "complianceEmail": {
            "type": "string",
            "description": "Email address for compliance-related communications.",
            "format": "email"
          },
          "compliancePhone": {
            "type": "string",
            "description": "Phone in format \"+12223334444\"."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd.",
            "format": "date"
          },
          "taxIdentificationNumber": {
            "type": "string",
            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvinceRegion": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions."
          },
          "postalCode": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes."
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec."
          },
          "signedAgreementId": {
            "type": "string",
            "description": "ID of the signed agreement, fetched through the HIFI's Hosted Terms of Service Link."
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user. \n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          },
          "govIdFront": {
            "type": "string",
            "description": "URL of image of the front of the user's government issued ID.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "govIdBack": {
            "type": "string",
            "description": "Not required for passports. Required for all other ID types. URL of image of the back of the user's government issued ID.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "govIdCountry": {
            "type": "string",
            "description": "Alpha-3 country code of the provided government id as defined in the ISO 3166-1 spec. Note that the government ID may be different from the 'country' above.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n"
          },
          "proofOfResidency": {
            "type": "string",
            "description": "URL of the file of the proof of residency.\nUtility bills and bank statements are recommended for proof of address.\nRequired for individuals who provide government ID documents from a controlled or prohibited region and claim residence outside that region.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          }
        }
      },
      "BusinessUserUpdate": {
        "type": "object",
        "title": "Update Business User",
        "properties": {
          "kycLevel": {
            "type": "number",
            "description": "If provided, the KYC level of the user will be upgraded to the provided level and the user will be required to submit all the fields required for the new KYC level. \nYou can refer to the Create Business User (KYC Level 2) endpoint for the required fields.\n\nCurrently you can only upgrade from KYC level 1 to 2.\n",
            "enum": [
              2
            ]
          },
          "businessName": {
            "type": "string"
          },
          "businessDescription": {
            "type": "string"
          },
          "complianceEmail": {
            "type": "string",
            "description": "Email address for compliance-related communications.",
            "format": "email"
          },
          "sourceOfFunds": {
            "type": "string",
            "description": "The source of funds for the business, e.g. profits, income, venture capital, etc."
          },
          "businessType": {
            "type": "string",
            "description": "The type of business structure that most closely matches the business customer.",
            "enum": [
              "cooperative",
              "corporation",
              "llc",
              "partnership",
              "sole_prop",
              "trust",
              "other"
            ]
          },
          "taxIdentificationNumber": {
            "type": "string",
            "description": "For individual US customers, SSN should be used. For non-US individual customers, a national ID is preferred where applicable; however, a tax ID can also be used as an alternative."
          },
          "website": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvinceRegion": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions."
          },
          "postalCode": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes."
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n",
            "format": "ipv4"
          },
          "signedAgreementId": {
            "type": "string",
            "description": "ID of the signed agreement, fetched through the HIFI's Hosted Terms of Service Link POST /tos-link"
          },
          "formationDoc": {
            "type": "string",
            "description": "URL of image of the formation documentation. \n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "proofOfOwnership": {
            "type": "string",
            "description": "URL of image of the ownership documentation.\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          },
          "transmitsCustomerFunds": {
            "type": "boolean",
            "description": "True if the business transmits funds on behalf of its customers (i.e. transmitsCustomerFunds == true)"
          },
          "complianceScreeningExplanation": {
            "type": "string",
            "description": "Required if transmits_customer_funds is true. An explanation of types of compliance screening (KYC, KYB, or AML) the customer performs before transmitting funds on behalf of its customers."
          },
          "isDao": {
            "type": "boolean",
            "description": "Whether the business is a DAO (Decentralized Autonomous Organization)"
          },
          "ultimateBeneficialOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UltimateBeneficialOwnerKycTwo"
            }
          },
          "proofOfResidency": {
            "type": "string",
            "description": "URL of image of the proof of address that ties the owner's name to the provided address. Typically a utility bill or bank statement.\nRequired for businesses registered or operating in the EEA (European Economic Area).\nUtility bills and bank statements are recommended for proof of address.\n\n(See [here](https://docs.hifibridge.com/docs/unsupported-regions-countries) for the list of unsupported countries/states.)\n\n*Maximum file size 10MB and minimum file size 10KB\n\n*Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif\n"
          }
        }
      },
      "UltimateBeneficialOwnerKycOne": {
        "type": "object",
        "properties": {
          "legalFirstName": {
            "type": "string"
          },
          "legalLastName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd.",
            "format": "date"
          },
          "hasControl": {
            "type": "boolean",
            "description": "True if the person has a significant responsibility to control, manage, or direct the activities of the business. At least one of the ultimateBeneficialOwners needs to have this set to true."
          },
          "isSigner": {
            "type": "boolean",
            "description": "True if the person can authorize transactions on behalf of the business. At least one of the ultimateBeneficialOwners needs to have this set to true."
          }
        },
        "required": [
          "legalFirstName",
          "legalLastName",
          "dateOfBirth",
          "hasControl",
          "isSigner"
        ]
      },
      "UltimateBeneficialOwnerKycTwo": {
        "type": "object",
        "properties": {
          "legalFirstName": {
            "type": "string"
          },
          "legalLastName": {
            "type": "string"
          },
          "complianceEmail": {
            "type": "string",
            "format": "email"
          },
          "compliancePhone": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in format yyyy-mm-dd.",
            "format": "date"
          },
          "taxIdentificationNumber": {
            "type": "string"
          },
          "govIdCountry": {
            "type": "string",
            "description": "Three-letter alpha-3 country code of the submitted government id as defined in the ISO 3166-1 spec."
          },
          "country": {
            "type": "string",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec."
          },
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvinceRegion": {
            "type": "string",
            "description": "ISO 3166-2 subdivision code. Must be supplied if the country has subdivisions."
          },
          "postalCode": {
            "type": "string",
            "description": "Must be supplied for countries that use postal codes."
          },
          "hasOwnership": {
            "type": "boolean",
            "description": "True if the person has at least 25% ownership of the business."
          },
          "hasControl": {
            "type": "boolean",
            "description": "True if the person has a significant responsibility to control, manage, or direct the activities of the business. At least one of the ultimateBeneficialOwners needs to have this set to true."
          },
          "isSigner": {
            "type": "boolean",
            "description": "True if the person can authorize transactions on behalf of the business. At least one of the ultimateBeneficialOwners needs to have this set to true."
          },
          "relationshipEstablishedAt": {
            "type": "string",
            "description": "The date that the ultimateBeneficialOwners first became an owner, control person, or signer for the business in format yyyy-mm-dd."
          },
          "govIdFront": {
            "type": "string",
            "description": "URL of image of the government issued ID Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          },
          "govIdBack": {
            "type": "string",
            "description": "URL of image of the government issued ID Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          },
          "proofOfResidency": {
            "type": "string",
            "description": "URL of image of the proof of address Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          }
        },
        "required": [
          "legalFirstName",
          "legalLastName",
          "complianceEmail",
          "compliancePhone",
          "dateOfBirth",
          "taxIdentificationNumber",
          "country",
          "addressLine1",
          "city",
          "postalCode",
          "stateProvinceRegion",
          "govIdFront",
          "proofOfResidency",
          "hasOwnership",
          "hasControl",
          "isSigner",
          "relationshipEstablishedAt"
        ]
      },
      "ToSLink": {
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "type": "string",
            "description": "Unique identifier for the resource",
            "format": "uuid"
          },
          "templateId": {
            "type": "string",
            "description": "Id of the custom terms of service template generated in the HIFI developer dashboard. If not passed, the page will use HIFI's default template."
          },
          "redirectUrl": {
            "type": "string",
            "description": "Url to redirect after accepting the terms of service link. The signedAgreementId is the same as the passed idempotencyKey, you may attempt to call the POST /user/create endpoint, but if the user did not accept the TOS, the user creation will return an error."
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "UserObjectPending": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "kyc": {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  },
                  "actionNeeded": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "fieldsToResubmit": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "onChain": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "actionNeeded": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "fieldsToResubmit": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "addresses": {
                    "type": "object",
                    "properties": {
                      "POLYGON_AMOY": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "onRamp": {
            "type": "object",
            "properties": {
              "usd": {
                "type": "object",
                "properties": {
                  "achPush": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "achPull": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "euro": {
                "type": "object",
                "properties": {
                  "sepa": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "offRamp": {
            "type": "object",
            "properties": {
              "usd": {
                "type": "object",
                "properties": {
                  "ach": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "euro": {
                "type": "object",
                "properties": {
                  "sepa": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "brl": {
                "type": "object",
                "properties": {
                  "pix": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "mxn": {
                "type": "object",
                "properties": {
                  "spei": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "cop": {
                "type": "object",
                "properties": {
                  "ach_cop": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "ars": {
                "type": "object",
                "properties": {
                  "transfers": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "user": {
            "id": "4d93ab4f-3983-4ac0-8c97-54bbc0f287fa",
            "kyc": {
              "level": 2,
              "status": "ACTIVE",
              "actionNeeded": {
                "actions": [],
                "fieldsToResubmit": []
              },
              "message": ""
            }
          },
          "onChain": {
            "wallet": {
              "status": "ACTIVE",
              "message": "",
              "actionNeeded": {
                "actions": [],
                "fieldsToResubmit": []
              },
              "addresses": {
                "POLYGON_AMOY": {
                  "address": "0x43B343Bb48E23F58406271131B71448fF95787AD"
                }
              }
            }
          },
          "onRamp": {
            "usd": {
              "achPush": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "kyc aplication still under review"
              },
              "achPull": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "kyc aplication still under review"
              }
            },
            "euro": {
              "sepa": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "SEPA onRamp will be available in near future"
              }
            }
          },
          "offRamp": {
            "usd": {
              "ach": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "kyc aplication still under review"
              }
            },
            "euro": {
              "sepa": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "kyc aplication still under review"
              }
            },
            "brl": {
              "pix": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "mxn": {
              "spei": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "cop": {
              "ach_cop": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "ars": {
              "transfers": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "ars TRANSFERS offRamp will be available in near future"
              }
            }
          }
        }
      },
      "UserObjectPending_dep": {
        "type": "object",
        "properties": {
          "wallet": {
            "type": "object",
            "properties": {
              "walletStatus": {
                "type": "string"
              },
              "walletMessage": {
                "type": "string"
              },
              "actionNeeded": {
                "type": "object",
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fieldsToResubmit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "walletAddress": {
                "type": "object",
                "properties": {
                  "POLYGON_AMOY": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "user_kyc": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "actionNeeded": {
                "type": "object",
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fieldsToResubmit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              }
            }
          },
          "ramps": {
            "type": "object",
            "properties": {
              "usdAch": {
                "type": "object",
                "properties": {
                  "onRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      },
                      "achPull": {
                        "type": "object",
                        "properties": {
                          "achPullStatus": {
                            "type": "string"
                          },
                          "actionNeeded": {
                            "type": "object",
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "fieldsToResubmit": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "offRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "euroSepa": {
                "type": "object",
                "properties": {
                  "onRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "offRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "example": {
          "wallet": {
            "walletStatus": "ACTIVE",
            "walletMessage": "",
            "actionNeeded": {
              "actions": [],
              "fieldsToResubmit": []
            },
            "walletAddress": {
              "POLYGON_MAINNET": {
                "address": "0x575c35882aC6048FF53DBDe72D0E90d4da071E2D"
              }
            }
          },
          "user_kyc": {
            "status": "PENDING",
            "actionNeeded": {
              "actions": [],
              "fieldsToResubmit": []
            },
            "message": "kyc aplication still under review"
          },
          "ramps": {
            "usdAch": {
              "onRamp": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "",
                "achPull": {
                  "achPullStatus": "PENDING",
                  "actionNeeded": {
                    "actions": [],
                    "fieldsToResubmit": []
                  },
                  "message": ""
                }
              },
              "offRamp": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                }
              }
            },
            "euroSepa": {
              "onRamp": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "SEPA onRamp will be available in near future"
              },
              "offRamp": {
                "status": "PENDING",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            }
          },
          "user": {
            "id": "04725d62-d181-4533-80a2-cbcadac6321e"
          }
        }
      },
      "UserObjectActive": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "kyc": {
                "type": "object",
                "properties": {
                  "level": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  },
                  "actionNeeded": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "fieldsToResubmit": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "onChain": {
            "type": "object",
            "properties": {
              "wallet": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "actionNeeded": {
                    "type": "object",
                    "properties": {
                      "actions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "fieldsToResubmit": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "addresses": {
                    "type": "object",
                    "properties": {
                      "POLYGON_AMOY": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "onRamp": {
            "type": "object",
            "properties": {
              "usd": {
                "type": "object",
                "properties": {
                  "achPush": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "achPull": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "euro": {
                "type": "object",
                "properties": {
                  "sepa": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "offRamp": {
            "type": "object",
            "properties": {
              "usd": {
                "type": "object",
                "properties": {
                  "ach": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "euro": {
                "type": "object",
                "properties": {
                  "sepa": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "brl": {
                "type": "object",
                "properties": {
                  "pix": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "mxn": {
                "type": "object",
                "properties": {
                  "spei": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "cop": {
                "type": "object",
                "properties": {
                  "ach_cop": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "ars": {
                "type": "object",
                "properties": {
                  "transfers": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "user": {
            "id": "4d93ab4f-3983-4ac0-8c97-54bbc0f287fa",
            "kyc": {
              "level": 2,
              "status": "ACTIVE",
              "actionNeeded": {
                "actions": [],
                "fieldsToResubmit": []
              },
              "message": ""
            }
          },
          "onChain": {
            "wallet": {
              "status": "ACTIVE",
              "message": "",
              "actionNeeded": {
                "actions": [],
                "fieldsToResubmit": []
              },
              "addresses": {
                "POLYGON_AMOY": {
                  "address": "0x43B343Bb48E23F58406271131B71448fF95787AD"
                }
              }
            }
          },
          "onRamp": {
            "usd": {
              "achPush": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              },
              "achPull": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "euro": {
              "sepa": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "SEPA onRamp will be available in near future"
              }
            }
          },
          "offRamp": {
            "usd": {
              "ach": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "euro": {
              "sepa": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "brl": {
              "pix": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "mxn": {
              "spei": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "cop": {
              "ach_cop": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            },
            "ars": {
              "transfers": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "ars TRANSFERS offRamp will be available in near future"
              }
            }
          }
        }
      },
      "UserObjectActive_dep": {
        "type": "object",
        "properties": {
          "wallet": {
            "type": "object",
            "properties": {
              "walletStatus": {
                "type": "string"
              },
              "walletMessage": {
                "type": "string"
              },
              "actionNeeded": {
                "type": "object",
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fieldsToResubmit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "walletAddress": {
                "type": "object",
                "properties": {
                  "POLYGON_AMOY": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "user_kyc": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "actionNeeded": {
                "type": "object",
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "fieldsToResubmit": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              }
            }
          },
          "ramps": {
            "type": "object",
            "properties": {
              "usdAch": {
                "type": "object",
                "properties": {
                  "onRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      },
                      "achPull": {
                        "type": "object",
                        "properties": {
                          "achPullStatus": {
                            "type": "string"
                          },
                          "actionNeeded": {
                            "type": "object",
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "fieldsToResubmit": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "message": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "offRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "euroSepa": {
                "type": "object",
                "properties": {
                  "onRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "offRamp": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "actionNeeded": {
                        "type": "object",
                        "properties": {
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "fieldsToResubmit": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        },
        "example": {
          "wallet": {
            "walletStatus": "ACTIVE",
            "walletMessage": "",
            "actionNeeded": {
              "actions": [],
              "fieldsToResubmit": []
            },
            "walletAddress": {
              "POLYGON_MAINNET": {
                "address": "0x575c35882aC6048FF53DBDe72D0E90d4da071E2D"
              }
            }
          },
          "user_kyc": {
            "status": "ACTIVE",
            "actionNeeded": {
              "actions": [],
              "fieldsToResubmit": []
            },
            "message": ""
          },
          "ramps": {
            "usdAch": {
              "onRamp": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "",
                "achPull": {
                  "achPullStatus": "ACTIVE",
                  "actionNeeded": {
                    "actions": [],
                    "fieldsToResubmit": []
                  },
                  "message": ""
                }
              },
              "offRamp": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                }
              }
            },
            "euroSepa": {
              "onRamp": {
                "status": "INACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": "SEPA onRamp will be available in near future"
              },
              "offRamp": {
                "status": "ACTIVE",
                "actionNeeded": {
                  "actions": [],
                  "fieldsToResubmit": []
                },
                "message": ""
              }
            }
          },
          "user": {
            "id": "04725d62-d181-4533-80a2-cbcadac6321e"
          }
        }
      },
      "AllUserObjects": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "userType": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date"
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date"
                },
                "userKycStatus": {
                  "type": "string"
                },
                "userKycLevel": {
                  "type": "integer"
                },
                "walletStatus": {
                  "type": "string"
                },
                "walletAddress": {
                  "type": "object",
                  "properties": {
                    "POLYGON_MAINNET": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "count": 1,
          "users": [
            {
              "userId": "04725d62-d181-4533-80a2-cbcadac6321e",
              "userType": "individual",
              "name": "John Doe",
              "dateOfBirth": "1997-02-17T00:00:00+00:00",
              "email": "johndoe@gmail.com",
              "phone": "+11234567890",
              "createdAt": "2024-08-08T19:54:33.035Z",
              "userKycStatus": "ACTIVE",
              "userKycLevel": 2,
              "walletStatus": "ACTIVE",
              "walletAddress": {
                "POLYGON_MAINNET": {
                  "address": "0x575c35882aC6048FF53DBDe72D0E90d4da071E2D"
                }
              }
            }
          ]
        }
      },
      "ToSLinkObject": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "signedAgreementId": {
            "type": "string"
          }
        },
        "example": {
          "url": "https://dashboard.hifibridge.com/accept-terms-of-service?sessionToken=e12d9c3f-75a8-4bd1-aa3d-97a2cfaf2c40&redirectUrl=undefined&templateId=2fb2da24-472a-4e5b-b160-038d9dc82a40",
          "signedAgreementId": "e12d9c3f-75a8-4bd1-aa3d-97a2cfaf2c40"
        }
      },
      "WalletBalanceObject": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string",
            "description": "The raw balance of the wallet expressed in the smallest denomination of the token. This format is ideal for backend calculations, automation processes, or when precise, unrounded figures are necessary for smart contract interactions. For example, use this when calculating transaction fees or performing token transfer operations that require exact values."
          },
          "displayBalance": {
            "type": "string",
            "description": "The wallet balance formatted as a decimal string for display purposes, adjusted according to the token's decimal places to facilitate human readability. This format is best used in user interfaces where balances are displayed to end-users, such as in wallet apps or dashboards, where readability and familiarity are crucial. For instance, displaying an account balance on a user's home screen or summary page."
          },
          "tokenInfo": {
            "type": "object",
            "description": "Detailed information about the token.",
            "properties": {
              "chain": {
                "type": "string",
                "description": "The blockchain network where the token is hosted."
              },
              "contractAddress": {
                "type": "string",
                "description": "The smart contract address of the token."
              },
              "assetType": {
                "type": "string",
                "description": "The type of asset, typically 'ERC20' for Ethereum-based tokens."
              },
              "quantity": {
                "type": "string",
                "description": "The quantity of the token in its smallest unit."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token, such as 'USDC'."
              },
              "decimals": {
                "type": "integer",
                "description": "The number of decimal places the token can be divided into."
              }
            }
          }
        },
        "example": {
          "balance": "10000",
          "displayBalance": "0.01",
          "tokenInfo": {
            "chain": "POLYGON_MAINNET",
            "contractAddress": "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359",
            "assetType": "ERC20",
            "quantity": "10000",
            "symbol": "USDC",
            "decimals": 6
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/account/usd/onramp/plaid": {
      "post": {
        "summary": "Link Plaid Account for USD Onramp (ACH)",
        "description": "HIFI and Plaid have partnered to enable you to link your existing Plaid account to HIFI for USD Onramp with ACH pull. To get started, follow the Plaid [guide](https://plaid.com/docs/api/processors/) to create a Plaid \nprocessor token. Passing the processor_token to this endpoint will allow you to link your Plaid account for USD onramp.\n\nLinking a Plaid account alone will not allow the user to onramp as onramping requires a Virtual Account. To create a virtual account, you can set the parameter `createVirtualAccount` to `true` in the request body \nor you can create one manually later on through the `Create Onramp Virtual Account` endpoint. Creating a Virtual Account is a billable event.\n",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UsdOnrampAchAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsdOnrampAchAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/activateOnRampRail": {
      "post": {
        "summary": "Create Onramp Virtual Account",
        "description": "HIFI will create a virtual bank account for you that allows you to onramp by simply deposit fiat into the bank account.\n\nThe created virtual bank account only supports the specified onramp `rail`. eg. ACH and WIRE with USD. If you need to support a different rail, you'll need to generate another virtual bank account for that specific rail.\n\n***Note: Create Virtual Account is a billable event.***\n",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UsdOnrampWireAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsdOnrampWireAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/usd/offramp": {
      "post": {
        "summary": "Add USD Offramp Bank Account (ACH)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UsdOfframpAchAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsdOfframpAchAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/wire/us/offramp": {
      "post": {
        "summary": "Add USD Offramp Bank Account (Wire)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UsdOfframpWireAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsdOfframpWireAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/euro/offramp": {
      "post": {
        "summary": "Add EURO Offramp Bank Account (SEPA)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EurOfframpSepaAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EurOfframpSepaAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/kes/momo/offramp": {
      "post": {
        "summary": "Add KES Offramp Bank Account (MOMO KES)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KesOfframpMomoAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/KesOfframpMomoAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/xof/momo/offramp": {
      "post": {
        "summary": "Add XOF Offramp Bank Account (MOMO XOF)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/XofOfframpMomoAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/XofOfframpMomoAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/rwf/momo/offramp": {
      "post": {
        "summary": "Add RWF Offramp Bank Account (MOMO RWF)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RwfOfframpMomoAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RwfOfframpMomoAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/zmw/momo/offramp": {
      "post": {
        "summary": "Add ZMW Offramp Bank Account (MOMO ZMW)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ZmwOfframpMomoAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ZmwOfframpMomoAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/ngn/bank/offramp": {
      "post": {
        "summary": "Add NGN Offramp Bank Account (Bank NGN)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NgnOfframpBankAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NgnOfframpBankAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/ugx/bank/offramp": {
      "post": {
        "summary": "Add UGX Offramp Bank Account (Bank UGX)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UgxOfframpBankAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UgxOfframpBankAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/tzs/bank/offramp": {
      "post": {
        "summary": "Add TZS Offramp Bank Account (Bank TZS)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TzsOfframpBankAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TzsOfframpBankAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/mwk/bank/offramp": {
      "post": {
        "summary": "Add MWK Offramp Bank Account (Bank MWK)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MwkOfframpBankAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MwkOfframpBankAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/xaf/bank/offramp": {
      "post": {
        "summary": "Add XAF Offramp Bank Account (Bank XAF)",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/XafOfframpBankAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/XafOfframpBankAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/south-america/receiver": {
      "post": {
        "summary": "Create South America Offramp Receiver",
        "description": "Create a Receiver for South America Offramp. This should be called prior to \nadding any South America offramp bank account since each South America offramp bank account is tied to a receiver.\n\n| Limit Type               | Individual Light KYC | Business Light KYB | Individual Standard KYC | Business Standard KYB |\n|--------------------------|----------------------|--------------------|-------------------------|-----------------------|\n| Per Transaction Limit    | $1,000               | $3,000             | $10,000                 | $30,000               |\n| Daily Limit              | $3,000               | $6,000             | $50,000                 | $100,000              |\n| Monthly Limit            | $10,000              | $15,000            | $100,000                | $250,000              |\n",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SAOfframpReceiverCreateBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SAOfframpReceiverCreateResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Get South America Offramp Receiver",
        "description": "Get an existing South America Offramp Receiver detail.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/ReceiverIdOptionalParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SAOfframpReceiverGetResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update South America Offramp Receiver",
        "description": "Update an existing South America Offramp Receiver detail.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/ReceiverIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SAOfframpReceiverUpdateBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SAOfframpReceiverUpdateResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/south-america/offramp": {
      "post": {
        "summary": "Add a South America Offramp Bank Account",
        "description": "Add a South America Offramp Bank Account to a Receiver. You will need a receiver id to add a bank account to. You can get the receiver id through the `Create South America Offramp Receiver` endpoint.\n\n**We currently support Brazil (BRL), Colombia (COP), and Mexico (MXN) offramp bank accounts. (Argentina (ARS) coming soon ...)**\n",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/ReceiverIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SAOfframpAccountBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BrlOfframpPixAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account": {
      "get": {
        "summary": "Get Account",
        "description": "Get an existing onramp or offramp account detail.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountIdParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/all": {
      "get": {
        "summary": "Get all Accounts",
        "description": "Get all existing onramp or offramp account details.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/CurrencyParameter"
          },
          {
            "$ref": "#/components/parameters/RailTypeParameter"
          },
          {
            "$ref": "#/components/parameters/PaymentRailParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllAccountsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/account/onRampRail/virtualAccount": {
      "get": {
        "summary": "Retrieve Onramp Virtual Account Details",
        "description": "Retrieve the created virtual bank account information. The response will include the desposit instructions and the micro deposit information requested by institution.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/RailParameter"
          },
          {
            "$ref": "#/components/parameters/DestinationCurrencyParameter"
          },
          {
            "$ref": "#/components/parameters/DestinationChainParameter"
          },
          {
            "$ref": "#/components/parameters/VALimitParameter"
          },
          {
            "$ref": "#/components/parameters/VACreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/VACreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetVirtualAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Ping HIFI Servers",
        "tags": [
          "Common"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/crypto-to-crypto": {
      "post": {
        "summary": "Transfer Stablecoin to Stablecoin",
        "description": "Transfer stablecoins between users or wallet addresses",
        "tags": [
          "Transfer"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CryptoToCryptoTransferBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToCryptoTransferResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Get a Stablecoin-to-Stablecoin Transfer Record",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferRecordIDParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToCryptoRecordResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/crypto-to-fiat": {
      "post": {
        "summary": "Convert Stablecoin to Fiat",
        "description": "Transfer crypto to fiat currency and send it to an offramp bank account.\n\nThere are two types of transfers, **quote-based** and **non-quote-based** transfers. \n* For **non-quote-based transfers**, the transfers are initiated immediately.\n* For **quote-based transfers**, the transfer status will initially be `OPEN_QUOTE`. You have to accept the transfer quote through the `Accept Transfer Quote` endpoint to initiate the transfer.\n\nQuote-based transfers:\n  * South America offramp transfers\n  * Africa offramp transfers\n",
        "tags": [
          "Transfer"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CryptoToFiatTransferBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToFiatTransferResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Get a Stablecoin-to-Fiat Transfer Record",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferRecordIDParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToFiatRecordResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/fiat-to-crypto": {
      "post": {
        "summary": "Convert Fiat to Stablecoin",
        "description": "Transfer fiat currency from an onramp bank account to crypto.",
        "tags": [
          "Transfer"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FiatToCryptoTransferBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FiatToCryptoTransferResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Get a Fiat-to-Stablecoin Transfer Record",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferRecordIDParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FiatToCryptoRecordResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/bridge-asset": {
      "post": {
        "summary": "Bridge Stablecoin",
        "description": "Bridge stablecoin across chains",
        "tags": [
          "Transfer"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BridgeAssetTransferBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BridgeAssetTransferResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Get a Bridge Asset Record",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BridgeAssetRecordIDParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BridgeAssetRecordResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/crypto-to-crypto/all": {
      "get": {
        "summary": "Get All Stablecoin-to-Stablecoin Transfer Records",
        "description": "Get all the transfer records of a user or all the transfer records under your organization.",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToCryptoAllRecordsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/crypto-to-fiat/all": {
      "get": {
        "summary": "Get All Stablecoin-to-Fiat Transfer Records",
        "description": "Get all the transfer records of a user or all the transfer records under your organization.",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToFiatAllRecordsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/fiat-to-crypto/all": {
      "get": {
        "summary": "Get All Fiat-to-Stablecoin Transfer Records",
        "description": "Get all the transfer records of a user or all the transfer records under your organization.",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FiatToCryptoAllRecordsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/conversionRate/crypto-to-fiat": {
      "get": {
        "summary": "Get Stablecoin-to-Fiat Conversion Rate",
        "description": "Retrieve conversion rate between stablecoin and fiat currency.",
        "tags": [
          "Quotes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FromCurrencyParameter"
          },
          {
            "$ref": "#/components/parameters/ToCurrencyParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CryptoToFiatConversionRateResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/crypto-to-fiat/acceptQuote": {
      "put": {
        "summary": "Accept Transfer Quote",
        "description": "Accept the transfer quote for quote-based transfers only. \n\nFor example, BRL offramp transfer is a quote-based transfer so its initial transfer status will be `OPEN_QUOTE`. This means you have to accept the transfer quote to initiate the transfer.\n",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/TransferRecordIDParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AcceptFiatToCryptoQuoteResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/transfer/ach/pull": {
      "post": {
        "summary": "Transfer Fiat to Fiat",
        "description": "Transfer fiat currency from an USD Onramp Plaid bank account to the specified bank account through ACH pull.",
        "tags": [
          "Transfer"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FiatToFiatTransferBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FiatToFiatRecordResponse"
          }
        }
      }
    },
    "/transfer": {
      "get": {
        "summary": "Get Transfer Record(s)",
        "description": "Get a single transfer record or all transfer records for a user, a specific transfer type, or all transfer records within your organization.\n\n* To get a **single record**, provide the required `id` and `transferType` parameters only.\n* To get **all records**, provide the optional `userId`, `transferType`, `limit`, `createdBefore`, and `createdAfter` parameters only. eg. Providing `userId` and `transferType` will return all transfer records of that user and transfer type.\n",
        "tags": [
          "Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/TransferRecordIDOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/TransferTypeOptionalParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FiatToCryptoAllRecordsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "summary": "Create User",
        "description": "Create a new Hifi user (Individual/Business)\n\nHIFI does not provide services to users or businesses from sanctioned and high-risk regions or unsupported US states. See [here](https://docs.hifibridge.com/docs/supported-regions-countries) for supported regions.\n\nTo learn more about user KYC levels, see [here](https://docs.hifibridge.com/docs/kyc-level).\n",
        "tags": [
          "User"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserCreateBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserObjectPendingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get User",
        "description": "Get an existing Hifi user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserObjectActiveResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update User",
        "description": "Update an existing Hifi user.\n\nHIFI does not provide services to users or businesses from sanctioned and high-risk regions or unsupported US states. See [here](https://docs.hifibridge.com/docs/supported-regions-countries) for supported regions.\n",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserUpdateBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserObjectPendingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "summary": "Get All Users",
        "description": "Get all existing Hifi users",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserTypeParameter"
          },
          {
            "$ref": "#/components/parameters/LimitParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedBeforeParameter"
          },
          {
            "$ref": "#/components/parameters/CreatedAfterParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AllUserObjectsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/tos-link": {
      "post": {
        "summary": "Generate Terms of Service Link",
        "description": "The Terms of Service page must be displayed to the end user. This page can be whitelabeled upon request.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ToSLinkBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ToSLinkObjectResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/user/wallet/balance": {
      "get": {
        "summary": "Get User Wallet Balance",
        "description": "Poll this endpoint to get the latest balance of a user's wallet, including details like the blockchain network and currency.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParameter"
          },
          {
            "$ref": "#/components/parameters/ChainParameter"
          },
          {
            "$ref": "#/components/parameters/CryptoCurrencyParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WalletBalanceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  }
}